state 3 contains 2 shift/reduce conflicts
state 36 contains 1 shift/reduce conflicts
state 36 contains 3 reduce/reduce conflicts
state 48 contains 2 shift/reduce conflicts
state 62 contains 2 shift/reduce conflicts
state 65 contains 1 shift/reduce conflicts
state 69 contains 1 shift/reduce conflicts
state 69 contains 51 reduce/reduce conflicts
state 199 contains 14 shift/reduce conflicts

rule 119 (var_method_modifiers) never reduced

-------- Grammar --------

rule 1 program: statements
rule 2 program: 
rule 3 statements: statement terminator
rule 4 statements: statements statement terminator
rule 5 block: NEWLINE statements
rule 6 optional_newline: NEWLINE
rule 7 optional_newline: 
rule 8 statement: comment
rule 9 statement: definition
rule 10 statement: namespace
rule 11 statement: motion_statement
rule 12 statement: label_definition
rule 13 statement: address
rule 14 statement: conditional
rule 15 statement: inline_conditional
rule 16 statement: forloop
rule 17 statement: while_loop
rule 18 statement: use_statement
rule 19 statement: set_skip_statement
rule 20 statement: wait_statement
rule 21 statement: case_statement
rule 22 statement: fanuc_eval
rule 23 statement: timer_method
rule 24 statement: position_data
rule 25 statement: raise
rule 26 statement: tp_header_definition
rule 27 statement: empty_stmt
rule 28 statement: PAUSE
rule 29 statement: ABORT
rule 30 empty_stmt: NEWLINE
rule 31 tp_header_definition: TP_HEADER EQUAL tp_header_value
rule 32 tp_header_value: STRING
rule 33 tp_header_value: TRUE_FALSE
rule 34 raise: RAISE var_or_indirect
rule 35 timer_method: TIMER_METHOD var_or_indirect
rule 36 fanuc_eval: EVAL STRING
rule 37 wait_statement: WAIT_FOR LPAREN indirectable COMMA STRING RPAREN
rule 38 wait_statement: WAIT_UNTIL LPAREN expression RPAREN
rule 39 wait_statement: WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier
rule 40 wait_statement: WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier DOT wait_modifier
rule 41 wait_modifier: timeout_modifier
rule 42 wait_modifier: after_modifier
rule 43 timeout_modifier: swallow_newlines TIMEOUT LPAREN label RPAREN
rule 44 after_modifier: swallow_newlines AFTER LPAREN indirectable COMMA STRING RPAREN
rule 45 label: LABEL
rule 46 use_statement: FANUC_USE indirectable
rule 47 set_skip_statement: SET_SKIP_CONDITION expression
rule 48 program_call: WORD LPAREN args RPAREN
rule 49 program_call: RUN WORD LPAREN args RPAREN
rule 50 args: arg
rule 51 args: args COMMA arg
rule 52 args: 
rule 53 arg: number
rule 54 arg: var
rule 55 arg: string
rule 56 arg: address
rule 57 string: STRING
rule 58 io_method: IO_METHOD var_or_indirect
rule 59 io_method: IO_METHOD LPAREN var_or_indirect RPAREN
rule 60 io_method: IO_METHOD LPAREN var_or_indirect COMMA number COMMA STRING RPAREN
rule 61 var_or_indirect: var
rule 62 var_or_indirect: indirect_thing
rule 63 jump: JUMP label
rule 64 conditional: IF expression block else_block END
rule 65 conditional: UNLESS expression block else_block END
rule 66 forloop: FOR var IN LPAREN minmax_val TO minmax_val RPAREN block END
rule 67 while_loop: WHILE expression block END
rule 68 minmax_val: integer
rule 69 minmax_val: var
rule 70 namespace: NAMESPACE WORD block END
rule 71 case_statement: CASE var swallow_newlines case_conditions case_else END
rule 72 case_conditions: case_condition
rule 73 case_conditions: case_conditions case_condition
rule 74 case_condition: WHEN case_allowed_condition swallow_newlines case_allowed_statement terminator
rule 75 case_allowed_condition: number
rule 76 case_allowed_condition: var
rule 77 case_else: ELSE swallow_newlines case_allowed_statement terminator
rule 78 case_else: 
rule 79 case_allowed_statement: program_call
rule 80 case_allowed_statement: jump
rule 81 inline_conditional: inlineable
rule 82 inline_conditional: inlineable IF expression
rule 83 inline_conditional: inlineable UNLESS expression
rule 84 inlineable: jump
rule 85 inlineable: assignment
rule 86 inlineable: io_method
rule 87 inlineable: program_call
rule 88 else_block: ELSE block
rule 89 else_block: 
rule 90 motion_statement: MOVE DOT swallow_newlines TO LPAREN var RPAREN motion_modifiers
rule 91 motion_modifiers: motion_modifier
rule 92 motion_modifiers: motion_modifiers motion_modifier
rule 93 motion_modifier: DOT swallow_newlines AT LPAREN speed RPAREN
rule 94 motion_modifier: DOT swallow_newlines TERM LPAREN valid_terminations RPAREN
rule 95 motion_modifier: DOT swallow_newlines OFFSET LPAREN var RPAREN
rule 96 motion_modifier: DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN
rule 97 motion_modifier: DOT swallow_newlines SKIP LPAREN label optional_lpos_arg RPAREN
rule 98 valid_terminations: integer
rule 99 valid_terminations: var
rule 100 valid_terminations: MINUS DIGIT
rule 101 optional_lpos_arg: COMMA var
rule 102 optional_lpos_arg: 
rule 103 indirectable: number
rule 104 indirectable: var
rule 105 time_seg_actions: program_call
rule 106 time_seg_actions: io_method
rule 107 time: var
rule 108 time: number
rule 109 speed: indirectable COMMA STRING
rule 110 speed: STRING
rule 111 label_definition: label
rule 112 definition: WORD ASSIGN definable
rule 113 assignment: var_or_indirect EQUAL expression
rule 114 assignment: var_or_indirect PLUS EQUAL expression
rule 115 assignment: var_or_indirect MINUS EQUAL expression
rule 116 var: WORD
rule 117 var: WORD var_method_modifiers
rule 118 var: namespaces var
rule 119 var_method_modifiers: 
rule 120 var_method_modifiers: var_method_modifier
rule 121 var_method_modifiers: var_method_modifiers var_method_modifier
rule 122 var_method_modifier: DOT swallow_newlines GROUP
rule 123 var_method_modifier: DOT swallow_newlines WORD
rule 124 namespaces: WORD COLON COLON
rule 125 expression: factor
rule 126 expression: BANG factor
rule 127 expression: expression operator expression
rule 128 operator: EEQUAL
rule 129 operator: NOTEQUAL
rule 130 operator: LT
rule 131 operator: GT
rule 132 operator: GTE
rule 133 operator: LTE
rule 134 operator: PLUS
rule 135 operator: MINUS
rule 136 operator: OR
rule 137 operator: STAR
rule 138 operator: SLASH
rule 139 operator: DIV
rule 140 operator: MOD
rule 141 operator: AND
rule 142 factor: number
rule 143 factor: signed_number
rule 144 factor: var
rule 145 factor: indirect_thing
rule 146 factor: paren_expr
rule 147 paren_expr: LPAREN expression RPAREN
rule 148 indirect_thing: INDIRECT LPAREN STRING COMMA indirectable RPAREN
rule 149 signed_number: sign DIGIT
rule 150 signed_number: sign REAL
rule 151 sign: MINUS
rule 152 number: integer
rule 153 number: REAL
rule 154 integer: DIGIT
rule 155 definable: numreg
rule 156 definable: output
rule 157 definable: input
rule 158 definable: posreg
rule 159 definable: position
rule 160 definable: vreg
rule 161 definable: number
rule 162 definable: signed_number
rule 163 definable: argument
rule 164 definable: timer
rule 165 definable: ualm
rule 166 definable: sreg
rule 167 sreg: SREG LBRACK DIGIT RBRACK
rule 168 ualm: UALM LBRACK DIGIT RBRACK
rule 169 timer: TIMER LBRACK DIGIT RBRACK
rule 170 argument: ARG LBRACK DIGIT RBRACK
rule 171 vreg: VREG LBRACK DIGIT RBRACK
rule 172 position: POSITION LBRACK DIGIT RBRACK
rule 173 numreg: NUMREG LBRACK DIGIT RBRACK
rule 174 posreg: POSREG LBRACK DIGIT RBRACK
rule 175 output: OUTPUT LBRACK DIGIT RBRACK
rule 176 input: INPUT LBRACK DIGIT RBRACK
rule 177 address: ADDRESS
rule 178 comment: COMMENT
rule 179 terminator: NEWLINE
rule 180 terminator: comment optional_newline
rule 181 terminator: false
rule 182 terminator: 
rule 183 swallow_newlines: NEWLINE
rule 184 swallow_newlines: 
rule 185 position_data: POSITION_DATA sn hash sn END
rule 186 sn: swallow_newlines
rule 187 hash: LBRACE sn hash_attributes sn RBRACE
rule 188 hash: LBRACE sn RBRACE
rule 189 hash_attributes: hash_attribute
rule 190 hash_attributes: hash_attributes COMMA sn hash_attribute
rule 191 hash_attribute: STRING COLON hash_value
rule 192 hash_value: STRING
rule 193 hash_value: hash
rule 194 hash_value: array
rule 195 hash_value: optional_sign DIGIT
rule 196 hash_value: optional_sign REAL
rule 197 hash_value: TRUE_FALSE
rule 198 optional_sign: sign
rule 199 optional_sign: 
rule 200 array: LBRACK sn array_values sn RBRACK
rule 201 array_values: array_value
rule 202 array_values: array_values COMMA sn array_value
rule 203 array_value: hash_value

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (85)
    on right: 
    on left : 
  program (86)
    on right: 
    on left : 1 2
  statements (87)
    on right: 1 4 5
    on left : 3 4
  statement (88)
    on right: 3 4
    on left : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
  terminator (89)
    on right: 3 4 74 77
    on left : 179 180 181 182
  block (90)
    on right: 64 65 66 67 70 88
    on left : 5
  optional_newline (91)
    on right: 180
    on left : 6 7
  comment (92)
    on right: 8 180
    on left : 178
  definition (93)
    on right: 9
    on left : 112
  namespace (94)
    on right: 10
    on left : 70
  motion_statement (95)
    on right: 11
    on left : 90
  label_definition (96)
    on right: 12
    on left : 111
  address (97)
    on right: 13 56
    on left : 177
  conditional (98)
    on right: 14
    on left : 64 65
  inline_conditional (99)
    on right: 15
    on left : 81 82 83
  forloop (100)
    on right: 16
    on left : 66
  while_loop (101)
    on right: 17
    on left : 67
  use_statement (102)
    on right: 18
    on left : 46
  set_skip_statement (103)
    on right: 19
    on left : 47
  wait_statement (104)
    on right: 20
    on left : 37 38 39 40
  case_statement (105)
    on right: 21
    on left : 71
  fanuc_eval (106)
    on right: 22
    on left : 36
  timer_method (107)
    on right: 23
    on left : 35
  position_data (108)
    on right: 24
    on left : 185
  raise (109)
    on right: 25
    on left : 34
  tp_header_definition (110)
    on right: 26
    on left : 31
  empty_stmt (111)
    on right: 27
    on left : 30
  tp_header_value (112)
    on right: 31
    on left : 32 33
  var_or_indirect (113)
    on right: 34 35 58 59 60 113 114 115
    on left : 61 62
  indirectable (114)
    on right: 37 44 46 109 148
    on left : 103 104
  expression (115)
    on right: 38 39 40 47 64 65 67 82 83 113 114 115 127 147
    on left : 125 126 127
  wait_modifier (116)
    on right: 39 40
    on left : 41 42
  timeout_modifier (117)
    on right: 41
    on left : 43
  after_modifier (118)
    on right: 42
    on left : 44
  swallow_newlines (119)
    on right: 43 44 71 74 77 90 93 94 95 96 97 122 123 186
    on left : 183 184
  label (120)
    on right: 43 63 97 111
    on left : 45
  program_call (121)
    on right: 79 87 105
    on left : 48 49
  args (122)
    on right: 48 49 51
    on left : 50 51 52
  arg (123)
    on right: 50 51
    on left : 53 54 55 56
  number (124)
    on right: 53 60 75 103 108 142 161
    on left : 152 153
  var (125)
    on right: 54 61 66 69 71 76 90 95 99 101 104 107 118 144
    on left : 116 117 118
  string (126)
    on right: 55
    on left : 57
  io_method (127)
    on right: 86 106
    on left : 58 59 60
  indirect_thing (128)
    on right: 62 145
    on left : 148
  jump (129)
    on right: 80 84
    on left : 63
  else_block (130)
    on right: 64 65
    on left : 88 89
  minmax_val (131)
    on right: 66
    on left : 68 69
  integer (132)
    on right: 68 98 152
    on left : 154
  case_conditions (133)
    on right: 71 73
    on left : 72 73
  case_else (134)
    on right: 71
    on left : 77 78
  case_condition (135)
    on right: 72 73
    on left : 74
  case_allowed_condition (136)
    on right: 74
    on left : 75 76
  case_allowed_statement (137)
    on right: 74 77
    on left : 79 80
  inlineable (138)
    on right: 81 82 83
    on left : 84 85 86 87
  assignment (139)
    on right: 85
    on left : 113 114 115
  motion_modifiers (140)
    on right: 90 92
    on left : 91 92
  motion_modifier (141)
    on right: 91 92
    on left : 93 94 95 96 97
  speed (142)
    on right: 93
    on left : 109 110
  valid_terminations (143)
    on right: 94
    on left : 98 99 100
  time (144)
    on right: 96
    on left : 107 108
  time_seg_actions (145)
    on right: 96
    on left : 105 106
  optional_lpos_arg (146)
    on right: 97
    on left : 101 102
  definable (147)
    on right: 112
    on left : 155 156 157 158 159 160 161 162 163 164 165 166
  var_method_modifiers (148)
    on right: 117 121
    on left : 119 120 121
  namespaces (149)
    on right: 118
    on left : 124
  var_method_modifier (150)
    on right: 120 121
    on left : 122 123
  factor (151)
    on right: 125 126
    on left : 142 143 144 145 146
  operator (152)
    on right: 127
    on left : 128 129 130 131 132 133 134 135 136 137 138 139 140 141
  signed_number (153)
    on right: 143 162
    on left : 149 150
  paren_expr (154)
    on right: 146
    on left : 147
  sign (155)
    on right: 149 150 198
    on left : 151
  numreg (156)
    on right: 155
    on left : 173
  output (157)
    on right: 156
    on left : 175
  input (158)
    on right: 157
    on left : 176
  posreg (159)
    on right: 158
    on left : 174
  position (160)
    on right: 159
    on left : 172
  vreg (161)
    on right: 160
    on left : 171
  argument (162)
    on right: 163
    on left : 170
  timer (163)
    on right: 164
    on left : 169
  ualm (164)
    on right: 165
    on left : 168
  sreg (165)
    on right: 166
    on left : 167
  sn (166)
    on right: 185 187 188 190 200 202
    on left : 186
  hash (167)
    on right: 185 193
    on left : 187 188
  hash_attributes (168)
    on right: 187 190
    on left : 189 190
  hash_attribute (169)
    on right: 189 190
    on left : 191
  hash_value (170)
    on right: 191 203
    on left : 192 193 194 195 196 197
  array (171)
    on right: 194
    on left : 200
  optional_sign (172)
    on right: 195 196
    on left : 198 199
  array_values (173)
    on right: 200 202
    on left : 201 202
  array_value (174)
    on right: 201 202
    on left : 203

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  ASSIGN (2) 112
  AT_SYM (3) 
  COMMENT (4) 178
  JUMP (5) 63
  IO_METHOD (6) 58 59 60
  INPUT (7) 176
  OUTPUT (8) 175
  NUMREG (9) 173
  POSREG (10) 174
  VREG (11) 171
  SREG (12) 167
  TIME_SEGMENT (13) 96
  ARG (14) 170
  UALM (15) 168
  MOVE (16) 90
  DOT (17) 39 40 90 93 94 95 96 97 122 123
  TO (18) 66 90
  AT (19) 93
  TERM (20) 94
  OFFSET (21) 95
  SKIP (22) 97
  GROUP (23) 122
  SEMICOLON (24) 
  NEWLINE (25) 5 6 30 179 183
  STRING (26) 32 36 37 44 57 60 109 110 148 191 192
  REAL (27) 150 153 196
  DIGIT (28) 100 149 154 167 168 169 170 171 172 173 174 175 176 195
  WORD (29) 48 49 70 112 116 117 123 124
  EQUAL (30) 31 113 114 115
  EEQUAL (31) 128
  NOTEQUAL (32) 129
  GTE (33) 132
  LTE (34) 133
  LT (35) 130
  GT (36) 131
  BANG (37) 126
  PLUS (38) 114 134
  MINUS (39) 100 115 135 151
  STAR (40) 137
  SLASH (41) 138
  DIV (42) 139
  AND (43) 141
  OR (44) 136
  MOD (45) 140
  IF (46) 64 82
  ELSE (47) 77 88
  END (48) 64 65 66 67 70 71 185
  UNLESS (49) 65 83
  FOR (50) 66
  IN (51) 66
  WHILE (52) 67
  WAIT_FOR (53) 37
  WAIT_UNTIL (54) 38 39 40
  TIMEOUT (55) 43
  AFTER (56) 44
  FANUC_USE (57) 46
  SET_SKIP_CONDITION (58) 47
  NAMESPACE (59) 70
  CASE (60) 71
  WHEN (61) 74
  INDIRECT (62) 148
  POSITION (63) 172
  EVAL (64) 36
  TIMER (65) 169
  TIMER_METHOD (66) 35
  RAISE (67) 34
  ABORT (68) 29
  POSITION_DATA (69) 185
  TRUE_FALSE (70) 33 197
  RUN (71) 49
  TP_HEADER (72) 31
  PAUSE (73) 28
  LPAREN (74) 37 38 39 40 43 44 48 49 59 60 66 90 93 94 95 96 97 147 148
  RPAREN (75) 37 38 39 40 43 44 48 49 59 60 66 90 93 94 95 96 97 147 148
  COLON (76) 124 191
  COMMA (77) 37 44 51 60 96 101 109 148 190 202
  LBRACK (78) 167 168 169 170 171 172 173 174 175 176 200
  RBRACK (79) 167 168 169 170 171 172 173 174 175 176 200
  LBRACE (80) 187 188
  RBRACE (81) 187 188
  LABEL (82) 45
  ADDRESS (83) 177
  false (84) 181

--------- State ---------

state 0


  COMMENT       shift, and go to state 59
  JUMP          shift, and go to state 41
  IO_METHOD     shift, and go to state 38
  MOVE          shift, and go to state 53
  NEWLINE       shift, and go to state 26
  WORD          shift, and go to state 36
  IF            shift, and go to state 42
  UNLESS        shift, and go to state 43
  FOR           shift, and go to state 44
  WHILE         shift, and go to state 45
  WAIT_FOR      shift, and go to state 31
  WAIT_UNTIL    shift, and go to state 32
  FANUC_USE     shift, and go to state 34
  SET_SKIP_CONDITION  shift, and go to state 35
  NAMESPACE     shift, and go to state 46
  CASE          shift, and go to state 47
  INDIRECT      shift, and go to state 57
  EVAL          shift, and go to state 30
  TIMER_METHOD  shift, and go to state 29
  RAISE         shift, and go to state 28
  ABORT         shift, and go to state 25
  POSITION_DATA  shift, and go to state 60
  RUN           shift, and go to state 37
  TP_HEADER     shift, and go to state 27
  PAUSE         shift, and go to state 24
  LABEL         shift, and go to state 33
  ADDRESS       shift, and go to state 58
  $default      reduce using rule 2 (program)

  program       go to state 1
  statements    go to state 2
  statement     go to state 3
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  address       go to state 9
  conditional   go to state 10
  inline_conditional  go to state 11
  forloop       go to state 12
  while_loop    go to state 13
  use_statement  go to state 14
  set_skip_statement  go to state 15
  wait_statement  go to state 16
  case_statement  go to state 17
  fanuc_eval    go to state 18
  timer_method  go to state 19
  position_data  go to state 20
  raise         go to state 21
  tp_header_definition  go to state 22
  empty_stmt    go to state 23
  var           go to state 39
  indirect_thing  go to state 40
  inlineable    go to state 48
  jump          go to state 49
  assignment    go to state 50
  io_method     go to state 51
  program_call  go to state 52
  label         go to state 54
  var_or_indirect  go to state 55
  namespaces    go to state 56

state 1


  $end          shift, and go to state 61


state 2

   1) program : statements _
   4) statements : statements _ statement terminator

  COMMENT       shift, and go to state 59
  JUMP          shift, and go to state 41
  IO_METHOD     shift, and go to state 38
  MOVE          shift, and go to state 53
  NEWLINE       shift, and go to state 26
  WORD          shift, and go to state 36
  IF            shift, and go to state 42
  UNLESS        shift, and go to state 43
  FOR           shift, and go to state 44
  WHILE         shift, and go to state 45
  WAIT_FOR      shift, and go to state 31
  WAIT_UNTIL    shift, and go to state 32
  FANUC_USE     shift, and go to state 34
  SET_SKIP_CONDITION  shift, and go to state 35
  NAMESPACE     shift, and go to state 46
  CASE          shift, and go to state 47
  INDIRECT      shift, and go to state 57
  EVAL          shift, and go to state 30
  TIMER_METHOD  shift, and go to state 29
  RAISE         shift, and go to state 28
  ABORT         shift, and go to state 25
  POSITION_DATA  shift, and go to state 60
  RUN           shift, and go to state 37
  TP_HEADER     shift, and go to state 27
  PAUSE         shift, and go to state 24
  LABEL         shift, and go to state 33
  ADDRESS       shift, and go to state 58
  $default      reduce using rule 1 (program)

  statement     go to state 62
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  address       go to state 9
  conditional   go to state 10
  inline_conditional  go to state 11
  forloop       go to state 12
  while_loop    go to state 13
  use_statement  go to state 14
  set_skip_statement  go to state 15
  wait_statement  go to state 16
  case_statement  go to state 17
  fanuc_eval    go to state 18
  timer_method  go to state 19
  position_data  go to state 20
  raise         go to state 21
  tp_header_definition  go to state 22
  empty_stmt    go to state 23
  var           go to state 39
  indirect_thing  go to state 40
  inlineable    go to state 48
  jump          go to state 49
  assignment    go to state 50
  io_method     go to state 51
  program_call  go to state 52
  label         go to state 54
  var_or_indirect  go to state 55
  namespaces    go to state 56

state 3

   3) statements : statement _ terminator

  COMMENT       shift, and go to state 59
  COMMENT       [reduce using rule 182 (terminator)]
  NEWLINE       shift, and go to state 64
  NEWLINE       [reduce using rule 182 (terminator)]
  false         shift, and go to state 66
  $default      reduce using rule 182 (terminator)

  terminator    go to state 63
  comment       go to state 65

state 4

   8) statement : comment _

  $default      reduce using rule 8 (statement)


state 5

   9) statement : definition _

  $default      reduce using rule 9 (statement)


state 6

  10) statement : namespace _

  $default      reduce using rule 10 (statement)


state 7

  11) statement : motion_statement _

  $default      reduce using rule 11 (statement)


state 8

  12) statement : label_definition _

  $default      reduce using rule 12 (statement)


state 9

  13) statement : address _

  $default      reduce using rule 13 (statement)


state 10

  14) statement : conditional _

  $default      reduce using rule 14 (statement)


state 11

  15) statement : inline_conditional _

  $default      reduce using rule 15 (statement)


state 12

  16) statement : forloop _

  $default      reduce using rule 16 (statement)


state 13

  17) statement : while_loop _

  $default      reduce using rule 17 (statement)


state 14

  18) statement : use_statement _

  $default      reduce using rule 18 (statement)


state 15

  19) statement : set_skip_statement _

  $default      reduce using rule 19 (statement)


state 16

  20) statement : wait_statement _

  $default      reduce using rule 20 (statement)


state 17

  21) statement : case_statement _

  $default      reduce using rule 21 (statement)


state 18

  22) statement : fanuc_eval _

  $default      reduce using rule 22 (statement)


state 19

  23) statement : timer_method _

  $default      reduce using rule 23 (statement)


state 20

  24) statement : position_data _

  $default      reduce using rule 24 (statement)


state 21

  25) statement : raise _

  $default      reduce using rule 25 (statement)


state 22

  26) statement : tp_header_definition _

  $default      reduce using rule 26 (statement)


state 23

  27) statement : empty_stmt _

  $default      reduce using rule 27 (statement)


state 24

  28) statement : PAUSE _

  $default      reduce using rule 28 (statement)


state 25

  29) statement : ABORT _

  $default      reduce using rule 29 (statement)


state 26

  30) empty_stmt : NEWLINE _

  $default      reduce using rule 30 (empty_stmt)


state 27

  31) tp_header_definition : TP_HEADER _ EQUAL tp_header_value

  EQUAL         shift, and go to state 67


state 28

  34) raise : RAISE _ var_or_indirect

  WORD          shift, and go to state 69
  INDIRECT      shift, and go to state 57

  var_or_indirect  go to state 68
  var           go to state 39
  indirect_thing  go to state 40
  namespaces    go to state 56

state 29

  35) timer_method : TIMER_METHOD _ var_or_indirect

  WORD          shift, and go to state 69
  INDIRECT      shift, and go to state 57

  var_or_indirect  go to state 70
  var           go to state 39
  indirect_thing  go to state 40
  namespaces    go to state 56

state 30

  36) fanuc_eval : EVAL _ STRING

  STRING        shift, and go to state 71


state 31

  37) wait_statement : WAIT_FOR _ LPAREN indirectable COMMA STRING RPAREN

  LPAREN        shift, and go to state 72


state 32

  38) wait_statement : WAIT_UNTIL _ LPAREN expression RPAREN
  39) wait_statement : WAIT_UNTIL _ LPAREN expression RPAREN DOT wait_modifier
  40) wait_statement : WAIT_UNTIL _ LPAREN expression RPAREN DOT wait_modifier DOT wait_modifier

  LPAREN        shift, and go to state 73


state 33

  45) label : LABEL _

  $default      reduce using rule 45 (label)


state 34

  46) use_statement : FANUC_USE _ indirectable

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  indirectable  go to state 74
  number        go to state 75
  var           go to state 76
  namespaces    go to state 56
  integer       go to state 77

state 35

  47) set_skip_statement : SET_SKIP_CONDITION _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 80
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 36

  48) program_call : WORD _ LPAREN args RPAREN
 112) definition : WORD _ ASSIGN definable
 116) var : WORD _
 117) var : WORD _ var_method_modifiers
 124) namespaces : WORD _ COLON COLON

  ASSIGN        shift, and go to state 92
  DOT           shift, and go to state 95
  DOT           [reduce using rule 119 (var_method_modifiers)]
  LPAREN        shift, and go to state 91
  COLON         shift, and go to state 96
  EQUAL         [reduce using rule 119 (var_method_modifiers)]
  PLUS          [reduce using rule 119 (var_method_modifiers)]
  MINUS         [reduce using rule 119 (var_method_modifiers)]
  $default      reduce using rule 116 (var)

  var_method_modifiers  go to state 93
  var_method_modifier  go to state 94

state 37

  49) program_call : RUN _ WORD LPAREN args RPAREN

  WORD          shift, and go to state 97


state 38

  58) io_method : IO_METHOD _ var_or_indirect
  59) io_method : IO_METHOD _ LPAREN var_or_indirect RPAREN
  60) io_method : IO_METHOD _ LPAREN var_or_indirect COMMA number COMMA STRING RPAREN

  WORD          shift, and go to state 69
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 99

  var_or_indirect  go to state 98
  var           go to state 39
  indirect_thing  go to state 40
  namespaces    go to state 56

state 39

  61) var_or_indirect : var _

  $default      reduce using rule 61 (var_or_indirect)


state 40

  62) var_or_indirect : indirect_thing _

  $default      reduce using rule 62 (var_or_indirect)


state 41

  63) jump : JUMP _ label

  LABEL         shift, and go to state 33

  label         go to state 100

state 42

  64) conditional : IF _ expression block else_block END

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 101
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 43

  65) conditional : UNLESS _ expression block else_block END

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 102
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 44

  66) forloop : FOR _ var IN LPAREN minmax_val TO minmax_val RPAREN block END

  WORD          shift, and go to state 69

  var           go to state 103
  namespaces    go to state 56

state 45

  67) while_loop : WHILE _ expression block END

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 104
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 46

  70) namespace : NAMESPACE _ WORD block END

  WORD          shift, and go to state 105


state 47

  71) case_statement : CASE _ var swallow_newlines case_conditions case_else END

  WORD          shift, and go to state 69

  var           go to state 106
  namespaces    go to state 56

state 48

  81) inline_conditional : inlineable _
  82) inline_conditional : inlineable _ IF expression
  83) inline_conditional : inlineable _ UNLESS expression

  IF            shift, and go to state 107
  IF            [reduce using rule 81 (inline_conditional)]
  UNLESS        shift, and go to state 108
  UNLESS        [reduce using rule 81 (inline_conditional)]
  $default      reduce using rule 81 (inline_conditional)


state 49

  84) inlineable : jump _

  $default      reduce using rule 84 (inlineable)


state 50

  85) inlineable : assignment _

  $default      reduce using rule 85 (inlineable)


state 51

  86) inlineable : io_method _

  $default      reduce using rule 86 (inlineable)


state 52

  87) inlineable : program_call _

  $default      reduce using rule 87 (inlineable)


state 53

  90) motion_statement : MOVE _ DOT swallow_newlines TO LPAREN var RPAREN motion_modifiers

  DOT           shift, and go to state 109


state 54

 111) label_definition : label _

  $default      reduce using rule 111 (label_definition)


state 55

 113) assignment : var_or_indirect _ EQUAL expression
 114) assignment : var_or_indirect _ PLUS EQUAL expression
 115) assignment : var_or_indirect _ MINUS EQUAL expression

  EQUAL         shift, and go to state 110
  PLUS          shift, and go to state 111
  MINUS         shift, and go to state 112


state 56

 118) var : namespaces _ var

  WORD          shift, and go to state 69

  namespaces    go to state 56
  var           go to state 113

state 57

 148) indirect_thing : INDIRECT _ LPAREN STRING COMMA indirectable RPAREN

  LPAREN        shift, and go to state 114


state 58

 177) address : ADDRESS _

  $default      reduce using rule 177 (address)


state 59

 178) comment : COMMENT _

  $default      reduce using rule 178 (comment)


state 60

 185) position_data : POSITION_DATA _ sn hash sn END

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  sn            go to state 116
  swallow_newlines  go to state 117

state 61


  $end          shift, and go to state 118


state 62

   4) statements : statements statement _ terminator

  COMMENT       shift, and go to state 59
  COMMENT       [reduce using rule 182 (terminator)]
  NEWLINE       shift, and go to state 64
  NEWLINE       [reduce using rule 182 (terminator)]
  false         shift, and go to state 66
  $default      reduce using rule 182 (terminator)

  terminator    go to state 119
  comment       go to state 65

state 63

   3) statements : statement terminator _

  $default      reduce using rule 3 (statements)


state 64

 179) terminator : NEWLINE _

  $default      reduce using rule 179 (terminator)


state 65

 180) terminator : comment _ optional_newline

  NEWLINE       shift, and go to state 120
  NEWLINE       [reduce using rule 7 (optional_newline)]
  $default      reduce using rule 7 (optional_newline)

  optional_newline  go to state 121

state 66

 181) terminator : false _

  $default      reduce using rule 181 (terminator)


state 67

  31) tp_header_definition : TP_HEADER EQUAL _ tp_header_value

  STRING        shift, and go to state 123
  TRUE_FALSE    shift, and go to state 124

  tp_header_value  go to state 122

state 68

  34) raise : RAISE var_or_indirect _

  $default      reduce using rule 34 (raise)


state 69

 116) var : WORD _
 117) var : WORD _ var_method_modifiers
 124) namespaces : WORD _ COLON COLON

  DOT           shift, and go to state 95
  DOT           [reduce using rule 119 (var_method_modifiers)]
  COLON         shift, and go to state 96
  $end          [reduce using rule 119 (var_method_modifiers)]
  COMMENT       [reduce using rule 119 (var_method_modifiers)]
  JUMP          [reduce using rule 119 (var_method_modifiers)]
  IO_METHOD     [reduce using rule 119 (var_method_modifiers)]
  MOVE          [reduce using rule 119 (var_method_modifiers)]
  TO            [reduce using rule 119 (var_method_modifiers)]
  NEWLINE       [reduce using rule 119 (var_method_modifiers)]
  WORD          [reduce using rule 119 (var_method_modifiers)]
  EQUAL         [reduce using rule 119 (var_method_modifiers)]
  EEQUAL        [reduce using rule 119 (var_method_modifiers)]
  NOTEQUAL      [reduce using rule 119 (var_method_modifiers)]
  GTE           [reduce using rule 119 (var_method_modifiers)]
  LTE           [reduce using rule 119 (var_method_modifiers)]
  LT            [reduce using rule 119 (var_method_modifiers)]
  GT            [reduce using rule 119 (var_method_modifiers)]
  PLUS          [reduce using rule 119 (var_method_modifiers)]
  MINUS         [reduce using rule 119 (var_method_modifiers)]
  STAR          [reduce using rule 119 (var_method_modifiers)]
  SLASH         [reduce using rule 119 (var_method_modifiers)]
  DIV           [reduce using rule 119 (var_method_modifiers)]
  AND           [reduce using rule 119 (var_method_modifiers)]
  OR            [reduce using rule 119 (var_method_modifiers)]
  MOD           [reduce using rule 119 (var_method_modifiers)]
  IF            [reduce using rule 119 (var_method_modifiers)]
  ELSE          [reduce using rule 119 (var_method_modifiers)]
  END           [reduce using rule 119 (var_method_modifiers)]
  UNLESS        [reduce using rule 119 (var_method_modifiers)]
  FOR           [reduce using rule 119 (var_method_modifiers)]
  IN            [reduce using rule 119 (var_method_modifiers)]
  WHILE         [reduce using rule 119 (var_method_modifiers)]
  WAIT_FOR      [reduce using rule 119 (var_method_modifiers)]
  WAIT_UNTIL    [reduce using rule 119 (var_method_modifiers)]
  FANUC_USE     [reduce using rule 119 (var_method_modifiers)]
  SET_SKIP_CONDITION  [reduce using rule 119 (var_method_modifiers)]
  NAMESPACE     [reduce using rule 119 (var_method_modifiers)]
  CASE          [reduce using rule 119 (var_method_modifiers)]
  WHEN          [reduce using rule 119 (var_method_modifiers)]
  INDIRECT      [reduce using rule 119 (var_method_modifiers)]
  EVAL          [reduce using rule 119 (var_method_modifiers)]
  TIMER_METHOD  [reduce using rule 119 (var_method_modifiers)]
  RAISE         [reduce using rule 119 (var_method_modifiers)]
  ABORT         [reduce using rule 119 (var_method_modifiers)]
  POSITION_DATA  [reduce using rule 119 (var_method_modifiers)]
  RUN           [reduce using rule 119 (var_method_modifiers)]
  TP_HEADER     [reduce using rule 119 (var_method_modifiers)]
  PAUSE         [reduce using rule 119 (var_method_modifiers)]
  RPAREN        [reduce using rule 119 (var_method_modifiers)]
  COMMA         [reduce using rule 119 (var_method_modifiers)]
  LABEL         [reduce using rule 119 (var_method_modifiers)]
  ADDRESS       [reduce using rule 119 (var_method_modifiers)]
  false         [reduce using rule 119 (var_method_modifiers)]
  $default      reduce using rule 116 (var)

  var_method_modifiers  go to state 93
  var_method_modifier  go to state 94

state 70

  35) timer_method : TIMER_METHOD var_or_indirect _

  $default      reduce using rule 35 (timer_method)


state 71

  36) fanuc_eval : EVAL STRING _

  $default      reduce using rule 36 (fanuc_eval)


state 72

  37) wait_statement : WAIT_FOR LPAREN _ indirectable COMMA STRING RPAREN

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  indirectable  go to state 125
  number        go to state 75
  var           go to state 76
  namespaces    go to state 56
  integer       go to state 77

state 73

  38) wait_statement : WAIT_UNTIL LPAREN _ expression RPAREN
  39) wait_statement : WAIT_UNTIL LPAREN _ expression RPAREN DOT wait_modifier
  40) wait_statement : WAIT_UNTIL LPAREN _ expression RPAREN DOT wait_modifier DOT wait_modifier

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 126
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 74

  46) use_statement : FANUC_USE indirectable _

  $default      reduce using rule 46 (use_statement)


state 75

 103) indirectable : number _

  $default      reduce using rule 103 (indirectable)


state 76

 104) indirectable : var _

  $default      reduce using rule 104 (indirectable)


state 77

 152) number : integer _

  $default      reduce using rule 152 (number)


state 78

 153) number : REAL _

  $default      reduce using rule 153 (number)


state 79

 154) integer : DIGIT _

  $default      reduce using rule 154 (integer)


state 80

  47) set_skip_statement : SET_SKIP_CONDITION expression _
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  $default      reduce using rule 47 (set_skip_statement)

  operator      go to state 127

state 81

 125) expression : factor _

  $default      reduce using rule 125 (expression)


state 82

 126) expression : BANG _ factor

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  namespaces    go to state 56
  factor        go to state 142
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 83

 142) factor : number _

  $default      reduce using rule 142 (factor)


state 84

 143) factor : signed_number _

  $default      reduce using rule 143 (factor)


state 85

 144) factor : var _

  $default      reduce using rule 144 (factor)


state 86

 145) factor : indirect_thing _

  $default      reduce using rule 145 (factor)


state 87

 146) factor : paren_expr _

  $default      reduce using rule 146 (factor)


state 88

 147) paren_expr : LPAREN _ expression RPAREN

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  namespaces    go to state 56
  factor        go to state 81
  expression    go to state 143
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 89

 149) signed_number : sign _ DIGIT
 150) signed_number : sign _ REAL

  REAL          shift, and go to state 145
  DIGIT         shift, and go to state 144


state 90

 151) sign : MINUS _

  $default      reduce using rule 151 (sign)


state 91

  48) program_call : WORD LPAREN _ args RPAREN

  STRING        shift, and go to state 152
  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  ADDRESS       shift, and go to state 58
  $default      reduce using rule 52 (args)

  args          go to state 146
  arg           go to state 147
  number        go to state 148
  var           go to state 149
  string        go to state 150
  address       go to state 151
  namespaces    go to state 56
  integer       go to state 77

state 92

 112) definition : WORD ASSIGN _ definable

  INPUT         shift, and go to state 175
  OUTPUT        shift, and go to state 174
  NUMREG        shift, and go to state 172
  POSREG        shift, and go to state 173
  VREG          shift, and go to state 170
  SREG          shift, and go to state 166
  ARG           shift, and go to state 169
  UALM          shift, and go to state 167
  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  MINUS         shift, and go to state 90
  POSITION      shift, and go to state 171
  TIMER         shift, and go to state 168

  definable     go to state 153
  sign          go to state 89
  integer       go to state 77
  numreg        go to state 154
  output        go to state 155
  input         go to state 156
  posreg        go to state 157
  position      go to state 158
  vreg          go to state 159
  number        go to state 160
  signed_number  go to state 161
  argument      go to state 162
  timer         go to state 163
  ualm          go to state 164
  sreg          go to state 165

state 93

 117) var : WORD var_method_modifiers _
 121) var_method_modifiers : var_method_modifiers _ var_method_modifier

  DOT           shift, and go to state 95
  $default      reduce using rule 117 (var)

  var_method_modifier  go to state 176

state 94

 120) var_method_modifiers : var_method_modifier _

  $default      reduce using rule 120 (var_method_modifiers)


state 95

 122) var_method_modifier : DOT _ swallow_newlines GROUP
 123) var_method_modifier : DOT _ swallow_newlines WORD

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 177

state 96

 124) namespaces : WORD COLON _ COLON

  COLON         shift, and go to state 178


state 97

  49) program_call : RUN WORD _ LPAREN args RPAREN

  LPAREN        shift, and go to state 179


state 98

  58) io_method : IO_METHOD var_or_indirect _

  $default      reduce using rule 58 (io_method)


state 99

  59) io_method : IO_METHOD LPAREN _ var_or_indirect RPAREN
  60) io_method : IO_METHOD LPAREN _ var_or_indirect COMMA number COMMA STRING RPAREN

  WORD          shift, and go to state 69
  INDIRECT      shift, and go to state 57

  var_or_indirect  go to state 180
  var           go to state 39
  indirect_thing  go to state 40
  namespaces    go to state 56

state 100

  63) jump : JUMP label _

  $default      reduce using rule 63 (jump)


state 101

  64) conditional : IF expression _ block else_block END
 127) expression : expression _ operator expression

  NEWLINE       shift, and go to state 181
  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140

  block         go to state 182
  operator      go to state 127

state 102

  65) conditional : UNLESS expression _ block else_block END
 127) expression : expression _ operator expression

  NEWLINE       shift, and go to state 181
  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140

  block         go to state 183
  operator      go to state 127

state 103

  66) forloop : FOR var _ IN LPAREN minmax_val TO minmax_val RPAREN block END

  IN            shift, and go to state 184


state 104

  67) while_loop : WHILE expression _ block END
 127) expression : expression _ operator expression

  NEWLINE       shift, and go to state 181
  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140

  block         go to state 185
  operator      go to state 127

state 105

  70) namespace : NAMESPACE WORD _ block END

  NEWLINE       shift, and go to state 181

  block         go to state 186

state 106

  71) case_statement : CASE var _ swallow_newlines case_conditions case_else END

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 187

state 107

  82) inline_conditional : inlineable IF _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 188
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 108

  83) inline_conditional : inlineable UNLESS _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 189
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 109

  90) motion_statement : MOVE DOT _ swallow_newlines TO LPAREN var RPAREN motion_modifiers

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 190

state 110

 113) assignment : var_or_indirect EQUAL _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 191
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 111

 114) assignment : var_or_indirect PLUS _ EQUAL expression

  EQUAL         shift, and go to state 192


state 112

 115) assignment : var_or_indirect MINUS _ EQUAL expression

  EQUAL         shift, and go to state 193


state 113

 118) var : namespaces var _

  $default      reduce using rule 118 (var)


state 114

 148) indirect_thing : INDIRECT LPAREN _ STRING COMMA indirectable RPAREN

  STRING        shift, and go to state 194


state 115

 183) swallow_newlines : NEWLINE _

  $default      reduce using rule 183 (swallow_newlines)


state 116

 185) position_data : POSITION_DATA sn _ hash sn END

  LBRACE        shift, and go to state 196

  hash          go to state 195

state 117

 186) sn : swallow_newlines _

  $default      reduce using rule 186 (sn)


state 118


  $default      accept


state 119

   4) statements : statements statement terminator _

  $default      reduce using rule 4 (statements)


state 120

   6) optional_newline : NEWLINE _

  $default      reduce using rule 6 (optional_newline)


state 121

 180) terminator : comment optional_newline _

  $default      reduce using rule 180 (terminator)


state 122

  31) tp_header_definition : TP_HEADER EQUAL tp_header_value _

  $default      reduce using rule 31 (tp_header_definition)


state 123

  32) tp_header_value : STRING _

  $default      reduce using rule 32 (tp_header_value)


state 124

  33) tp_header_value : TRUE_FALSE _

  $default      reduce using rule 33 (tp_header_value)


state 125

  37) wait_statement : WAIT_FOR LPAREN indirectable _ COMMA STRING RPAREN

  COMMA         shift, and go to state 197


state 126

  38) wait_statement : WAIT_UNTIL LPAREN expression _ RPAREN
  39) wait_statement : WAIT_UNTIL LPAREN expression _ RPAREN DOT wait_modifier
  40) wait_statement : WAIT_UNTIL LPAREN expression _ RPAREN DOT wait_modifier DOT wait_modifier
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  RPAREN        shift, and go to state 198

  operator      go to state 127

state 127

 127) expression : expression operator _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  namespaces    go to state 56
  factor        go to state 81
  expression    go to state 199
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 128

 128) operator : EEQUAL _

  $default      reduce using rule 128 (operator)


state 129

 129) operator : NOTEQUAL _

  $default      reduce using rule 129 (operator)


state 130

 130) operator : LT _

  $default      reduce using rule 130 (operator)


state 131

 131) operator : GT _

  $default      reduce using rule 131 (operator)


state 132

 132) operator : GTE _

  $default      reduce using rule 132 (operator)


state 133

 133) operator : LTE _

  $default      reduce using rule 133 (operator)


state 134

 134) operator : PLUS _

  $default      reduce using rule 134 (operator)


state 135

 135) operator : MINUS _

  $default      reduce using rule 135 (operator)


state 136

 136) operator : OR _

  $default      reduce using rule 136 (operator)


state 137

 137) operator : STAR _

  $default      reduce using rule 137 (operator)


state 138

 138) operator : SLASH _

  $default      reduce using rule 138 (operator)


state 139

 139) operator : DIV _

  $default      reduce using rule 139 (operator)


state 140

 140) operator : MOD _

  $default      reduce using rule 140 (operator)


state 141

 141) operator : AND _

  $default      reduce using rule 141 (operator)


state 142

 126) expression : BANG factor _

  $default      reduce using rule 126 (expression)


state 143

 127) expression : expression _ operator expression
 147) paren_expr : LPAREN expression _ RPAREN

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  RPAREN        shift, and go to state 200

  operator      go to state 127

state 144

 149) signed_number : sign DIGIT _

  $default      reduce using rule 149 (signed_number)


state 145

 150) signed_number : sign REAL _

  $default      reduce using rule 150 (signed_number)


state 146

  48) program_call : WORD LPAREN args _ RPAREN
  51) args : args _ COMMA arg

  RPAREN        shift, and go to state 201
  COMMA         shift, and go to state 202


state 147

  50) args : arg _

  $default      reduce using rule 50 (args)


state 148

  53) arg : number _

  $default      reduce using rule 53 (arg)


state 149

  54) arg : var _

  $default      reduce using rule 54 (arg)


state 150

  55) arg : string _

  $default      reduce using rule 55 (arg)


state 151

  56) arg : address _

  $default      reduce using rule 56 (arg)


state 152

  57) string : STRING _

  $default      reduce using rule 57 (string)


state 153

 112) definition : WORD ASSIGN definable _

  $default      reduce using rule 112 (definition)


state 154

 155) definable : numreg _

  $default      reduce using rule 155 (definable)


state 155

 156) definable : output _

  $default      reduce using rule 156 (definable)


state 156

 157) definable : input _

  $default      reduce using rule 157 (definable)


state 157

 158) definable : posreg _

  $default      reduce using rule 158 (definable)


state 158

 159) definable : position _

  $default      reduce using rule 159 (definable)


state 159

 160) definable : vreg _

  $default      reduce using rule 160 (definable)


state 160

 161) definable : number _

  $default      reduce using rule 161 (definable)


state 161

 162) definable : signed_number _

  $default      reduce using rule 162 (definable)


state 162

 163) definable : argument _

  $default      reduce using rule 163 (definable)


state 163

 164) definable : timer _

  $default      reduce using rule 164 (definable)


state 164

 165) definable : ualm _

  $default      reduce using rule 165 (definable)


state 165

 166) definable : sreg _

  $default      reduce using rule 166 (definable)


state 166

 167) sreg : SREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 203


state 167

 168) ualm : UALM _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 204


state 168

 169) timer : TIMER _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 205


state 169

 170) argument : ARG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 206


state 170

 171) vreg : VREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 207


state 171

 172) position : POSITION _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 208


state 172

 173) numreg : NUMREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 209


state 173

 174) posreg : POSREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 210


state 174

 175) output : OUTPUT _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 211


state 175

 176) input : INPUT _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 212


state 176

 121) var_method_modifiers : var_method_modifiers var_method_modifier _

  $default      reduce using rule 121 (var_method_modifiers)


state 177

 122) var_method_modifier : DOT swallow_newlines _ GROUP
 123) var_method_modifier : DOT swallow_newlines _ WORD

  GROUP         shift, and go to state 213
  WORD          shift, and go to state 214


state 178

 124) namespaces : WORD COLON COLON _

  $default      reduce using rule 124 (namespaces)


state 179

  49) program_call : RUN WORD LPAREN _ args RPAREN

  STRING        shift, and go to state 152
  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  ADDRESS       shift, and go to state 58
  $default      reduce using rule 52 (args)

  args          go to state 215
  arg           go to state 147
  number        go to state 148
  var           go to state 149
  string        go to state 150
  address       go to state 151
  namespaces    go to state 56
  integer       go to state 77

state 180

  59) io_method : IO_METHOD LPAREN var_or_indirect _ RPAREN
  60) io_method : IO_METHOD LPAREN var_or_indirect _ COMMA number COMMA STRING RPAREN

  RPAREN        shift, and go to state 216
  COMMA         shift, and go to state 217


state 181

   5) block : NEWLINE _ statements

  COMMENT       shift, and go to state 59
  JUMP          shift, and go to state 41
  IO_METHOD     shift, and go to state 38
  MOVE          shift, and go to state 53
  NEWLINE       shift, and go to state 26
  WORD          shift, and go to state 36
  IF            shift, and go to state 42
  UNLESS        shift, and go to state 43
  FOR           shift, and go to state 44
  WHILE         shift, and go to state 45
  WAIT_FOR      shift, and go to state 31
  WAIT_UNTIL    shift, and go to state 32
  FANUC_USE     shift, and go to state 34
  SET_SKIP_CONDITION  shift, and go to state 35
  NAMESPACE     shift, and go to state 46
  CASE          shift, and go to state 47
  INDIRECT      shift, and go to state 57
  EVAL          shift, and go to state 30
  TIMER_METHOD  shift, and go to state 29
  RAISE         shift, and go to state 28
  ABORT         shift, and go to state 25
  POSITION_DATA  shift, and go to state 60
  RUN           shift, and go to state 37
  TP_HEADER     shift, and go to state 27
  PAUSE         shift, and go to state 24
  LABEL         shift, and go to state 33
  ADDRESS       shift, and go to state 58

  statement     go to state 3
  statements    go to state 218
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  address       go to state 9
  conditional   go to state 10
  inline_conditional  go to state 11
  forloop       go to state 12
  while_loop    go to state 13
  use_statement  go to state 14
  set_skip_statement  go to state 15
  wait_statement  go to state 16
  case_statement  go to state 17
  fanuc_eval    go to state 18
  timer_method  go to state 19
  position_data  go to state 20
  raise         go to state 21
  tp_header_definition  go to state 22
  empty_stmt    go to state 23
  var           go to state 39
  indirect_thing  go to state 40
  inlineable    go to state 48
  jump          go to state 49
  assignment    go to state 50
  io_method     go to state 51
  program_call  go to state 52
  label         go to state 54
  var_or_indirect  go to state 55
  namespaces    go to state 56

state 182

  64) conditional : IF expression block _ else_block END

  ELSE          shift, and go to state 220
  $default      reduce using rule 89 (else_block)

  else_block    go to state 219

state 183

  65) conditional : UNLESS expression block _ else_block END

  ELSE          shift, and go to state 220
  $default      reduce using rule 89 (else_block)

  else_block    go to state 221

state 184

  66) forloop : FOR var IN _ LPAREN minmax_val TO minmax_val RPAREN block END

  LPAREN        shift, and go to state 222


state 185

  67) while_loop : WHILE expression block _ END

  END           shift, and go to state 223


state 186

  70) namespace : NAMESPACE WORD block _ END

  END           shift, and go to state 224


state 187

  71) case_statement : CASE var swallow_newlines _ case_conditions case_else END

  WHEN          shift, and go to state 227

  case_conditions  go to state 225
  case_condition  go to state 226

state 188

  82) inline_conditional : inlineable IF expression _
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  $default      reduce using rule 82 (inline_conditional)

  operator      go to state 127

state 189

  83) inline_conditional : inlineable UNLESS expression _
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  $default      reduce using rule 83 (inline_conditional)

  operator      go to state 127

state 190

  90) motion_statement : MOVE DOT swallow_newlines _ TO LPAREN var RPAREN motion_modifiers

  TO            shift, and go to state 228


state 191

 113) assignment : var_or_indirect EQUAL expression _
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  $default      reduce using rule 113 (assignment)

  operator      go to state 127

state 192

 114) assignment : var_or_indirect PLUS EQUAL _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 229
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 193

 115) assignment : var_or_indirect MINUS EQUAL _ expression

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  BANG          shift, and go to state 82
  MINUS         shift, and go to state 90
  INDIRECT      shift, and go to state 57
  LPAREN        shift, and go to state 88

  expression    go to state 230
  namespaces    go to state 56
  factor        go to state 81
  number        go to state 83
  signed_number  go to state 84
  var           go to state 85
  indirect_thing  go to state 86
  paren_expr    go to state 87
  sign          go to state 89
  integer       go to state 77

state 194

 148) indirect_thing : INDIRECT LPAREN STRING _ COMMA indirectable RPAREN

  COMMA         shift, and go to state 231


state 195

 185) position_data : POSITION_DATA sn hash _ sn END

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  sn            go to state 232
  swallow_newlines  go to state 117

state 196

 187) hash : LBRACE _ sn hash_attributes sn RBRACE
 188) hash : LBRACE _ sn RBRACE

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 117
  sn            go to state 233

state 197

  37) wait_statement : WAIT_FOR LPAREN indirectable COMMA _ STRING RPAREN

  STRING        shift, and go to state 234


state 198

  38) wait_statement : WAIT_UNTIL LPAREN expression RPAREN _
  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN _ DOT wait_modifier
  40) wait_statement : WAIT_UNTIL LPAREN expression RPAREN _ DOT wait_modifier DOT wait_modifier

  DOT           shift, and go to state 235
  $default      reduce using rule 38 (wait_statement)


state 199

 127) expression : expression _ operator expression
 127) expression : expression operator expression _

  EEQUAL        shift, and go to state 128
  EEQUAL        [reduce using rule 127 (expression)]
  NOTEQUAL      shift, and go to state 129
  NOTEQUAL      [reduce using rule 127 (expression)]
  GTE           shift, and go to state 132
  GTE           [reduce using rule 127 (expression)]
  LTE           shift, and go to state 133
  LTE           [reduce using rule 127 (expression)]
  LT            shift, and go to state 130
  LT            [reduce using rule 127 (expression)]
  GT            shift, and go to state 131
  GT            [reduce using rule 127 (expression)]
  PLUS          shift, and go to state 134
  PLUS          [reduce using rule 127 (expression)]
  MINUS         shift, and go to state 135
  MINUS         [reduce using rule 127 (expression)]
  STAR          shift, and go to state 137
  STAR          [reduce using rule 127 (expression)]
  SLASH         shift, and go to state 138
  SLASH         [reduce using rule 127 (expression)]
  DIV           shift, and go to state 139
  DIV           [reduce using rule 127 (expression)]
  AND           shift, and go to state 141
  AND           [reduce using rule 127 (expression)]
  OR            shift, and go to state 136
  OR            [reduce using rule 127 (expression)]
  MOD           shift, and go to state 140
  MOD           [reduce using rule 127 (expression)]
  $default      reduce using rule 127 (expression)

  operator      go to state 127

state 200

 147) paren_expr : LPAREN expression RPAREN _

  $default      reduce using rule 147 (paren_expr)


state 201

  48) program_call : WORD LPAREN args RPAREN _

  $default      reduce using rule 48 (program_call)


state 202

  51) args : args COMMA _ arg

  STRING        shift, and go to state 152
  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  ADDRESS       shift, and go to state 58

  arg           go to state 236
  number        go to state 148
  var           go to state 149
  string        go to state 150
  address       go to state 151
  namespaces    go to state 56
  integer       go to state 77

state 203

 167) sreg : SREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 237


state 204

 168) ualm : UALM LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 238


state 205

 169) timer : TIMER LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 239


state 206

 170) argument : ARG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 240


state 207

 171) vreg : VREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 241


state 208

 172) position : POSITION LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 242


state 209

 173) numreg : NUMREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 243


state 210

 174) posreg : POSREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 244


state 211

 175) output : OUTPUT LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 245


state 212

 176) input : INPUT LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 246


state 213

 122) var_method_modifier : DOT swallow_newlines GROUP _

  $default      reduce using rule 122 (var_method_modifier)


state 214

 123) var_method_modifier : DOT swallow_newlines WORD _

  $default      reduce using rule 123 (var_method_modifier)


state 215

  49) program_call : RUN WORD LPAREN args _ RPAREN
  51) args : args _ COMMA arg

  RPAREN        shift, and go to state 247
  COMMA         shift, and go to state 202


state 216

  59) io_method : IO_METHOD LPAREN var_or_indirect RPAREN _

  $default      reduce using rule 59 (io_method)


state 217

  60) io_method : IO_METHOD LPAREN var_or_indirect COMMA _ number COMMA STRING RPAREN

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79

  number        go to state 248
  integer       go to state 77

state 218

   4) statements : statements _ statement terminator
   5) block : NEWLINE statements _

  COMMENT       shift, and go to state 59
  JUMP          shift, and go to state 41
  IO_METHOD     shift, and go to state 38
  MOVE          shift, and go to state 53
  NEWLINE       shift, and go to state 26
  WORD          shift, and go to state 36
  IF            shift, and go to state 42
  UNLESS        shift, and go to state 43
  FOR           shift, and go to state 44
  WHILE         shift, and go to state 45
  WAIT_FOR      shift, and go to state 31
  WAIT_UNTIL    shift, and go to state 32
  FANUC_USE     shift, and go to state 34
  SET_SKIP_CONDITION  shift, and go to state 35
  NAMESPACE     shift, and go to state 46
  CASE          shift, and go to state 47
  INDIRECT      shift, and go to state 57
  EVAL          shift, and go to state 30
  TIMER_METHOD  shift, and go to state 29
  RAISE         shift, and go to state 28
  ABORT         shift, and go to state 25
  POSITION_DATA  shift, and go to state 60
  RUN           shift, and go to state 37
  TP_HEADER     shift, and go to state 27
  PAUSE         shift, and go to state 24
  LABEL         shift, and go to state 33
  ADDRESS       shift, and go to state 58
  $default      reduce using rule 5 (block)

  statement     go to state 62
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  address       go to state 9
  conditional   go to state 10
  inline_conditional  go to state 11
  forloop       go to state 12
  while_loop    go to state 13
  use_statement  go to state 14
  set_skip_statement  go to state 15
  wait_statement  go to state 16
  case_statement  go to state 17
  fanuc_eval    go to state 18
  timer_method  go to state 19
  position_data  go to state 20
  raise         go to state 21
  tp_header_definition  go to state 22
  empty_stmt    go to state 23
  var           go to state 39
  indirect_thing  go to state 40
  inlineable    go to state 48
  jump          go to state 49
  assignment    go to state 50
  io_method     go to state 51
  program_call  go to state 52
  label         go to state 54
  var_or_indirect  go to state 55
  namespaces    go to state 56

state 219

  64) conditional : IF expression block else_block _ END

  END           shift, and go to state 249


state 220

  88) else_block : ELSE _ block

  NEWLINE       shift, and go to state 181

  block         go to state 250

state 221

  65) conditional : UNLESS expression block else_block _ END

  END           shift, and go to state 251


state 222

  66) forloop : FOR var IN LPAREN _ minmax_val TO minmax_val RPAREN block END

  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  minmax_val    go to state 252
  integer       go to state 253
  var           go to state 254
  namespaces    go to state 56

state 223

  67) while_loop : WHILE expression block END _

  $default      reduce using rule 67 (while_loop)


state 224

  70) namespace : NAMESPACE WORD block END _

  $default      reduce using rule 70 (namespace)


state 225

  71) case_statement : CASE var swallow_newlines case_conditions _ case_else END
  73) case_conditions : case_conditions _ case_condition

  ELSE          shift, and go to state 257
  WHEN          shift, and go to state 227
  $default      reduce using rule 78 (case_else)

  case_else     go to state 255
  case_condition  go to state 256

state 226

  72) case_conditions : case_condition _

  $default      reduce using rule 72 (case_conditions)


state 227

  74) case_condition : WHEN _ case_allowed_condition swallow_newlines case_allowed_statement terminator

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  case_allowed_condition  go to state 258
  number        go to state 259
  var           go to state 260
  namespaces    go to state 56
  integer       go to state 77

state 228

  90) motion_statement : MOVE DOT swallow_newlines TO _ LPAREN var RPAREN motion_modifiers

  LPAREN        shift, and go to state 261


state 229

 114) assignment : var_or_indirect PLUS EQUAL expression _
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  $default      reduce using rule 114 (assignment)

  operator      go to state 127

state 230

 115) assignment : var_or_indirect MINUS EQUAL expression _
 127) expression : expression _ operator expression

  EEQUAL        shift, and go to state 128
  NOTEQUAL      shift, and go to state 129
  GTE           shift, and go to state 132
  LTE           shift, and go to state 133
  LT            shift, and go to state 130
  GT            shift, and go to state 131
  PLUS          shift, and go to state 134
  MINUS         shift, and go to state 135
  STAR          shift, and go to state 137
  SLASH         shift, and go to state 138
  DIV           shift, and go to state 139
  AND           shift, and go to state 141
  OR            shift, and go to state 136
  MOD           shift, and go to state 140
  $default      reduce using rule 115 (assignment)

  operator      go to state 127

state 231

 148) indirect_thing : INDIRECT LPAREN STRING COMMA _ indirectable RPAREN

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  number        go to state 75
  var           go to state 76
  namespaces    go to state 56
  indirectable  go to state 262
  integer       go to state 77

state 232

 185) position_data : POSITION_DATA sn hash sn _ END

  END           shift, and go to state 263


state 233

 187) hash : LBRACE sn _ hash_attributes sn RBRACE
 188) hash : LBRACE sn _ RBRACE

  STRING        shift, and go to state 267
  RBRACE        shift, and go to state 265

  hash_attributes  go to state 264
  hash_attribute  go to state 266

state 234

  37) wait_statement : WAIT_FOR LPAREN indirectable COMMA STRING _ RPAREN

  RPAREN        shift, and go to state 268


state 235

  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT _ wait_modifier
  40) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT _ wait_modifier DOT wait_modifier

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  wait_modifier  go to state 269
  timeout_modifier  go to state 270
  after_modifier  go to state 271
  swallow_newlines  go to state 272

state 236

  51) args : args COMMA arg _

  $default      reduce using rule 51 (args)


state 237

 167) sreg : SREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 273


state 238

 168) ualm : UALM LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 274


state 239

 169) timer : TIMER LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 275


state 240

 170) argument : ARG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 276


state 241

 171) vreg : VREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 277


state 242

 172) position : POSITION LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 278


state 243

 173) numreg : NUMREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 279


state 244

 174) posreg : POSREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 280


state 245

 175) output : OUTPUT LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 281


state 246

 176) input : INPUT LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 282


state 247

  49) program_call : RUN WORD LPAREN args RPAREN _

  $default      reduce using rule 49 (program_call)


state 248

  60) io_method : IO_METHOD LPAREN var_or_indirect COMMA number _ COMMA STRING RPAREN

  COMMA         shift, and go to state 283


state 249

  64) conditional : IF expression block else_block END _

  $default      reduce using rule 64 (conditional)


state 250

  88) else_block : ELSE block _

  $default      reduce using rule 88 (else_block)


state 251

  65) conditional : UNLESS expression block else_block END _

  $default      reduce using rule 65 (conditional)


state 252

  66) forloop : FOR var IN LPAREN minmax_val _ TO minmax_val RPAREN block END

  TO            shift, and go to state 284


state 253

  68) minmax_val : integer _

  $default      reduce using rule 68 (minmax_val)


state 254

  69) minmax_val : var _

  $default      reduce using rule 69 (minmax_val)


state 255

  71) case_statement : CASE var swallow_newlines case_conditions case_else _ END

  END           shift, and go to state 285


state 256

  73) case_conditions : case_conditions case_condition _

  $default      reduce using rule 73 (case_conditions)


state 257

  77) case_else : ELSE _ swallow_newlines case_allowed_statement terminator

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 286

state 258

  74) case_condition : WHEN case_allowed_condition _ swallow_newlines case_allowed_statement terminator

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 287

state 259

  75) case_allowed_condition : number _

  $default      reduce using rule 75 (case_allowed_condition)


state 260

  76) case_allowed_condition : var _

  $default      reduce using rule 76 (case_allowed_condition)


state 261

  90) motion_statement : MOVE DOT swallow_newlines TO LPAREN _ var RPAREN motion_modifiers

  WORD          shift, and go to state 69

  var           go to state 288
  namespaces    go to state 56

state 262

 148) indirect_thing : INDIRECT LPAREN STRING COMMA indirectable _ RPAREN

  RPAREN        shift, and go to state 289


state 263

 185) position_data : POSITION_DATA sn hash sn END _

  $default      reduce using rule 185 (position_data)


state 264

 187) hash : LBRACE sn hash_attributes _ sn RBRACE
 190) hash_attributes : hash_attributes _ COMMA sn hash_attribute

  NEWLINE       shift, and go to state 115
  COMMA         shift, and go to state 291
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 117
  sn            go to state 290

state 265

 188) hash : LBRACE sn RBRACE _

  $default      reduce using rule 188 (hash)


state 266

 189) hash_attributes : hash_attribute _

  $default      reduce using rule 189 (hash_attributes)


state 267

 191) hash_attribute : STRING _ COLON hash_value

  COLON         shift, and go to state 292


state 268

  37) wait_statement : WAIT_FOR LPAREN indirectable COMMA STRING RPAREN _

  $default      reduce using rule 37 (wait_statement)


state 269

  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier _
  40) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier _ DOT wait_modifier

  DOT           shift, and go to state 293
  $default      reduce using rule 39 (wait_statement)


state 270

  41) wait_modifier : timeout_modifier _

  $default      reduce using rule 41 (wait_modifier)


state 271

  42) wait_modifier : after_modifier _

  $default      reduce using rule 42 (wait_modifier)


state 272

  43) timeout_modifier : swallow_newlines _ TIMEOUT LPAREN label RPAREN
  44) after_modifier : swallow_newlines _ AFTER LPAREN indirectable COMMA STRING RPAREN

  TIMEOUT       shift, and go to state 294
  AFTER         shift, and go to state 295


state 273

 167) sreg : SREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 167 (sreg)


state 274

 168) ualm : UALM LBRACK DIGIT RBRACK _

  $default      reduce using rule 168 (ualm)


state 275

 169) timer : TIMER LBRACK DIGIT RBRACK _

  $default      reduce using rule 169 (timer)


state 276

 170) argument : ARG LBRACK DIGIT RBRACK _

  $default      reduce using rule 170 (argument)


state 277

 171) vreg : VREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 171 (vreg)


state 278

 172) position : POSITION LBRACK DIGIT RBRACK _

  $default      reduce using rule 172 (position)


state 279

 173) numreg : NUMREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 173 (numreg)


state 280

 174) posreg : POSREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 174 (posreg)


state 281

 175) output : OUTPUT LBRACK DIGIT RBRACK _

  $default      reduce using rule 175 (output)


state 282

 176) input : INPUT LBRACK DIGIT RBRACK _

  $default      reduce using rule 176 (input)


state 283

  60) io_method : IO_METHOD LPAREN var_or_indirect COMMA number COMMA _ STRING RPAREN

  STRING        shift, and go to state 296


state 284

  66) forloop : FOR var IN LPAREN minmax_val TO _ minmax_val RPAREN block END

  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  minmax_val    go to state 297
  integer       go to state 253
  var           go to state 254
  namespaces    go to state 56

state 285

  71) case_statement : CASE var swallow_newlines case_conditions case_else END _

  $default      reduce using rule 71 (case_statement)


state 286

  77) case_else : ELSE swallow_newlines _ case_allowed_statement terminator

  JUMP          shift, and go to state 41
  WORD          shift, and go to state 298
  RUN           shift, and go to state 37

  case_allowed_statement  go to state 299
  program_call  go to state 300
  jump          go to state 301

state 287

  74) case_condition : WHEN case_allowed_condition swallow_newlines _ case_allowed_statement terminator

  JUMP          shift, and go to state 41
  WORD          shift, and go to state 298
  RUN           shift, and go to state 37

  case_allowed_statement  go to state 302
  program_call  go to state 300
  jump          go to state 301

state 288

  90) motion_statement : MOVE DOT swallow_newlines TO LPAREN var _ RPAREN motion_modifiers

  RPAREN        shift, and go to state 303


state 289

 148) indirect_thing : INDIRECT LPAREN STRING COMMA indirectable RPAREN _

  $default      reduce using rule 148 (indirect_thing)


state 290

 187) hash : LBRACE sn hash_attributes sn _ RBRACE

  RBRACE        shift, and go to state 304


state 291

 190) hash_attributes : hash_attributes COMMA _ sn hash_attribute

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 117
  sn            go to state 305

state 292

 191) hash_attribute : STRING COLON _ hash_value

  STRING        shift, and go to state 307
  MINUS         shift, and go to state 90
  TRUE_FALSE    shift, and go to state 311
  LBRACK        shift, and go to state 313
  LBRACE        shift, and go to state 196
  $default      reduce using rule 199 (optional_sign)

  hash_value    go to state 306
  hash          go to state 308
  array         go to state 309
  optional_sign  go to state 310
  sign          go to state 312

state 293

  40) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier DOT _ wait_modifier

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  wait_modifier  go to state 314
  timeout_modifier  go to state 270
  after_modifier  go to state 271
  swallow_newlines  go to state 272

state 294

  43) timeout_modifier : swallow_newlines TIMEOUT _ LPAREN label RPAREN

  LPAREN        shift, and go to state 315


state 295

  44) after_modifier : swallow_newlines AFTER _ LPAREN indirectable COMMA STRING RPAREN

  LPAREN        shift, and go to state 316


state 296

  60) io_method : IO_METHOD LPAREN var_or_indirect COMMA number COMMA STRING _ RPAREN

  RPAREN        shift, and go to state 317


state 297

  66) forloop : FOR var IN LPAREN minmax_val TO minmax_val _ RPAREN block END

  RPAREN        shift, and go to state 318


state 298

  48) program_call : WORD _ LPAREN args RPAREN

  LPAREN        shift, and go to state 91


state 299

  77) case_else : ELSE swallow_newlines case_allowed_statement _ terminator

  COMMENT       shift, and go to state 59
  NEWLINE       shift, and go to state 64
  false         shift, and go to state 66
  $default      reduce using rule 182 (terminator)

  terminator    go to state 319
  comment       go to state 65

state 300

  79) case_allowed_statement : program_call _

  $default      reduce using rule 79 (case_allowed_statement)


state 301

  80) case_allowed_statement : jump _

  $default      reduce using rule 80 (case_allowed_statement)


state 302

  74) case_condition : WHEN case_allowed_condition swallow_newlines case_allowed_statement _ terminator

  COMMENT       shift, and go to state 59
  NEWLINE       shift, and go to state 64
  false         shift, and go to state 66
  $default      reduce using rule 182 (terminator)

  terminator    go to state 320
  comment       go to state 65

state 303

  90) motion_statement : MOVE DOT swallow_newlines TO LPAREN var RPAREN _ motion_modifiers

  DOT           shift, and go to state 323

  motion_modifiers  go to state 321
  motion_modifier  go to state 322

state 304

 187) hash : LBRACE sn hash_attributes sn RBRACE _

  $default      reduce using rule 187 (hash)


state 305

 190) hash_attributes : hash_attributes COMMA sn _ hash_attribute

  STRING        shift, and go to state 267

  hash_attribute  go to state 324

state 306

 191) hash_attribute : STRING COLON hash_value _

  $default      reduce using rule 191 (hash_attribute)


state 307

 192) hash_value : STRING _

  $default      reduce using rule 192 (hash_value)


state 308

 193) hash_value : hash _

  $default      reduce using rule 193 (hash_value)


state 309

 194) hash_value : array _

  $default      reduce using rule 194 (hash_value)


state 310

 195) hash_value : optional_sign _ DIGIT
 196) hash_value : optional_sign _ REAL

  REAL          shift, and go to state 326
  DIGIT         shift, and go to state 325


state 311

 197) hash_value : TRUE_FALSE _

  $default      reduce using rule 197 (hash_value)


state 312

 198) optional_sign : sign _

  $default      reduce using rule 198 (optional_sign)


state 313

 200) array : LBRACK _ sn array_values sn RBRACK

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 117
  sn            go to state 327

state 314

  40) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier DOT wait_modifier _

  $default      reduce using rule 40 (wait_statement)


state 315

  43) timeout_modifier : swallow_newlines TIMEOUT LPAREN _ label RPAREN

  LABEL         shift, and go to state 33

  label         go to state 328

state 316

  44) after_modifier : swallow_newlines AFTER LPAREN _ indirectable COMMA STRING RPAREN

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  indirectable  go to state 329
  number        go to state 75
  var           go to state 76
  namespaces    go to state 56
  integer       go to state 77

state 317

  60) io_method : IO_METHOD LPAREN var_or_indirect COMMA number COMMA STRING RPAREN _

  $default      reduce using rule 60 (io_method)


state 318

  66) forloop : FOR var IN LPAREN minmax_val TO minmax_val RPAREN _ block END

  NEWLINE       shift, and go to state 181

  block         go to state 330

state 319

  77) case_else : ELSE swallow_newlines case_allowed_statement terminator _

  $default      reduce using rule 77 (case_else)


state 320

  74) case_condition : WHEN case_allowed_condition swallow_newlines case_allowed_statement terminator _

  $default      reduce using rule 74 (case_condition)


state 321

  90) motion_statement : MOVE DOT swallow_newlines TO LPAREN var RPAREN motion_modifiers _
  92) motion_modifiers : motion_modifiers _ motion_modifier

  DOT           shift, and go to state 323
  $default      reduce using rule 90 (motion_statement)

  motion_modifier  go to state 331

state 322

  91) motion_modifiers : motion_modifier _

  $default      reduce using rule 91 (motion_modifiers)


state 323

  93) motion_modifier : DOT _ swallow_newlines AT LPAREN speed RPAREN
  94) motion_modifier : DOT _ swallow_newlines TERM LPAREN valid_terminations RPAREN
  95) motion_modifier : DOT _ swallow_newlines OFFSET LPAREN var RPAREN
  96) motion_modifier : DOT _ swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN
  97) motion_modifier : DOT _ swallow_newlines SKIP LPAREN label optional_lpos_arg RPAREN

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 332

state 324

 190) hash_attributes : hash_attributes COMMA sn hash_attribute _

  $default      reduce using rule 190 (hash_attributes)


state 325

 195) hash_value : optional_sign DIGIT _

  $default      reduce using rule 195 (hash_value)


state 326

 196) hash_value : optional_sign REAL _

  $default      reduce using rule 196 (hash_value)


state 327

 200) array : LBRACK sn _ array_values sn RBRACK

  STRING        shift, and go to state 307
  MINUS         shift, and go to state 90
  TRUE_FALSE    shift, and go to state 311
  LBRACK        shift, and go to state 313
  LBRACE        shift, and go to state 196
  $default      reduce using rule 199 (optional_sign)

  hash          go to state 308
  array         go to state 309
  optional_sign  go to state 310
  sign          go to state 312
  array_values  go to state 333
  array_value   go to state 334
  hash_value    go to state 335

state 328

  43) timeout_modifier : swallow_newlines TIMEOUT LPAREN label _ RPAREN

  RPAREN        shift, and go to state 336


state 329

  44) after_modifier : swallow_newlines AFTER LPAREN indirectable _ COMMA STRING RPAREN

  COMMA         shift, and go to state 337


state 330

  66) forloop : FOR var IN LPAREN minmax_val TO minmax_val RPAREN block _ END

  END           shift, and go to state 338


state 331

  92) motion_modifiers : motion_modifiers motion_modifier _

  $default      reduce using rule 92 (motion_modifiers)


state 332

  93) motion_modifier : DOT swallow_newlines _ AT LPAREN speed RPAREN
  94) motion_modifier : DOT swallow_newlines _ TERM LPAREN valid_terminations RPAREN
  95) motion_modifier : DOT swallow_newlines _ OFFSET LPAREN var RPAREN
  96) motion_modifier : DOT swallow_newlines _ TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN
  97) motion_modifier : DOT swallow_newlines _ SKIP LPAREN label optional_lpos_arg RPAREN

  TIME_SEGMENT  shift, and go to state 342
  AT            shift, and go to state 339
  TERM          shift, and go to state 340
  OFFSET        shift, and go to state 341
  SKIP          shift, and go to state 343


state 333

 200) array : LBRACK sn array_values _ sn RBRACK
 202) array_values : array_values _ COMMA sn array_value

  NEWLINE       shift, and go to state 115
  COMMA         shift, and go to state 345
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 117
  sn            go to state 344

state 334

 201) array_values : array_value _

  $default      reduce using rule 201 (array_values)


state 335

 203) array_value : hash_value _

  $default      reduce using rule 203 (array_value)


state 336

  43) timeout_modifier : swallow_newlines TIMEOUT LPAREN label RPAREN _

  $default      reduce using rule 43 (timeout_modifier)


state 337

  44) after_modifier : swallow_newlines AFTER LPAREN indirectable COMMA _ STRING RPAREN

  STRING        shift, and go to state 346


state 338

  66) forloop : FOR var IN LPAREN minmax_val TO minmax_val RPAREN block END _

  $default      reduce using rule 66 (forloop)


state 339

  93) motion_modifier : DOT swallow_newlines AT _ LPAREN speed RPAREN

  LPAREN        shift, and go to state 347


state 340

  94) motion_modifier : DOT swallow_newlines TERM _ LPAREN valid_terminations RPAREN

  LPAREN        shift, and go to state 348


state 341

  95) motion_modifier : DOT swallow_newlines OFFSET _ LPAREN var RPAREN

  LPAREN        shift, and go to state 349


state 342

  96) motion_modifier : DOT swallow_newlines TIME_SEGMENT _ LPAREN time COMMA time_seg_actions RPAREN

  LPAREN        shift, and go to state 350


state 343

  97) motion_modifier : DOT swallow_newlines SKIP _ LPAREN label optional_lpos_arg RPAREN

  LPAREN        shift, and go to state 351


state 344

 200) array : LBRACK sn array_values sn _ RBRACK

  RBRACK        shift, and go to state 352


state 345

 202) array_values : array_values COMMA _ sn array_value

  NEWLINE       shift, and go to state 115
  $default      reduce using rule 184 (swallow_newlines)

  swallow_newlines  go to state 117
  sn            go to state 353

state 346

  44) after_modifier : swallow_newlines AFTER LPAREN indirectable COMMA STRING _ RPAREN

  RPAREN        shift, and go to state 354


state 347

  93) motion_modifier : DOT swallow_newlines AT LPAREN _ speed RPAREN

  STRING        shift, and go to state 357
  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  speed         go to state 355
  number        go to state 75
  var           go to state 76
  indirectable  go to state 356
  namespaces    go to state 56
  integer       go to state 77

state 348

  94) motion_modifier : DOT swallow_newlines TERM LPAREN _ valid_terminations RPAREN

  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69
  MINUS         shift, and go to state 361

  valid_terminations  go to state 358
  integer       go to state 359
  var           go to state 360
  namespaces    go to state 56

state 349

  95) motion_modifier : DOT swallow_newlines OFFSET LPAREN _ var RPAREN

  WORD          shift, and go to state 69

  var           go to state 362
  namespaces    go to state 56

state 350

  96) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN _ time COMMA time_seg_actions RPAREN

  REAL          shift, and go to state 78
  DIGIT         shift, and go to state 79
  WORD          shift, and go to state 69

  time          go to state 363
  var           go to state 364
  number        go to state 365
  namespaces    go to state 56
  integer       go to state 77

state 351

  97) motion_modifier : DOT swallow_newlines SKIP LPAREN _ label optional_lpos_arg RPAREN

  LABEL         shift, and go to state 33

  label         go to state 366

state 352

 200) array : LBRACK sn array_values sn RBRACK _

  $default      reduce using rule 200 (array)


state 353

 202) array_values : array_values COMMA sn _ array_value

  STRING        shift, and go to state 307
  MINUS         shift, and go to state 90
  TRUE_FALSE    shift, and go to state 311
  LBRACK        shift, and go to state 313
  LBRACE        shift, and go to state 196
  $default      reduce using rule 199 (optional_sign)

  hash          go to state 308
  array         go to state 309
  optional_sign  go to state 310
  sign          go to state 312
  array_value   go to state 367
  hash_value    go to state 335

state 354

  44) after_modifier : swallow_newlines AFTER LPAREN indirectable COMMA STRING RPAREN _

  $default      reduce using rule 44 (after_modifier)


state 355

  93) motion_modifier : DOT swallow_newlines AT LPAREN speed _ RPAREN

  RPAREN        shift, and go to state 368


state 356

 109) speed : indirectable _ COMMA STRING

  COMMA         shift, and go to state 369


state 357

 110) speed : STRING _

  $default      reduce using rule 110 (speed)


state 358

  94) motion_modifier : DOT swallow_newlines TERM LPAREN valid_terminations _ RPAREN

  RPAREN        shift, and go to state 370


state 359

  98) valid_terminations : integer _

  $default      reduce using rule 98 (valid_terminations)


state 360

  99) valid_terminations : var _

  $default      reduce using rule 99 (valid_terminations)


state 361

 100) valid_terminations : MINUS _ DIGIT

  DIGIT         shift, and go to state 371


state 362

  95) motion_modifier : DOT swallow_newlines OFFSET LPAREN var _ RPAREN

  RPAREN        shift, and go to state 372


state 363

  96) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time _ COMMA time_seg_actions RPAREN

  COMMA         shift, and go to state 373


state 364

 107) time : var _

  $default      reduce using rule 107 (time)


state 365

 108) time : number _

  $default      reduce using rule 108 (time)


state 366

  97) motion_modifier : DOT swallow_newlines SKIP LPAREN label _ optional_lpos_arg RPAREN

  COMMA         shift, and go to state 375
  $default      reduce using rule 102 (optional_lpos_arg)

  optional_lpos_arg  go to state 374

state 367

 202) array_values : array_values COMMA sn array_value _

  $default      reduce using rule 202 (array_values)


state 368

  93) motion_modifier : DOT swallow_newlines AT LPAREN speed RPAREN _

  $default      reduce using rule 93 (motion_modifier)


state 369

 109) speed : indirectable COMMA _ STRING

  STRING        shift, and go to state 376


state 370

  94) motion_modifier : DOT swallow_newlines TERM LPAREN valid_terminations RPAREN _

  $default      reduce using rule 94 (motion_modifier)


state 371

 100) valid_terminations : MINUS DIGIT _

  $default      reduce using rule 100 (valid_terminations)


state 372

  95) motion_modifier : DOT swallow_newlines OFFSET LPAREN var RPAREN _

  $default      reduce using rule 95 (motion_modifier)


state 373

  96) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA _ time_seg_actions RPAREN

  IO_METHOD     shift, and go to state 38
  WORD          shift, and go to state 298
  RUN           shift, and go to state 37

  time_seg_actions  go to state 377
  program_call  go to state 378
  io_method     go to state 379

state 374

  97) motion_modifier : DOT swallow_newlines SKIP LPAREN label optional_lpos_arg _ RPAREN

  RPAREN        shift, and go to state 380


state 375

 101) optional_lpos_arg : COMMA _ var

  WORD          shift, and go to state 69

  var           go to state 381
  namespaces    go to state 56

state 376

 109) speed : indirectable COMMA STRING _

  $default      reduce using rule 109 (speed)


state 377

  96) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions _ RPAREN

  RPAREN        shift, and go to state 382


state 378

 105) time_seg_actions : program_call _

  $default      reduce using rule 105 (time_seg_actions)


state 379

 106) time_seg_actions : io_method _

  $default      reduce using rule 106 (time_seg_actions)


state 380

  97) motion_modifier : DOT swallow_newlines SKIP LPAREN label optional_lpos_arg RPAREN _

  $default      reduce using rule 97 (motion_modifier)


state 381

 101) optional_lpos_arg : COMMA var _

  $default      reduce using rule 101 (optional_lpos_arg)


state 382

  96) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN _

  $default      reduce using rule 96 (motion_modifier)

