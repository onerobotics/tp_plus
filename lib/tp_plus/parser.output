state 3 contains 2 shift/reduce conflicts
state 35 contains 1 shift/reduce conflicts
state 35 contains 3 reduce/reduce conflicts
state 47 contains 2 shift/reduce conflicts
state 60 contains 2 shift/reduce conflicts
state 63 contains 1 shift/reduce conflicts
state 67 contains 1 shift/reduce conflicts
state 67 contains 50 reduce/reduce conflicts
state 196 contains 14 shift/reduce conflicts

rule 117 (var_method_modifiers) never reduced

-------- Grammar --------

rule 1 program: statements
rule 2 program: 
rule 3 statements: statement terminator
rule 4 statements: statements statement terminator
rule 5 block: NEWLINE statements
rule 6 optional_newline: NEWLINE
rule 7 optional_newline: 
rule 8 statement: comment
rule 9 statement: definition
rule 10 statement: namespace
rule 11 statement: motion_statement
rule 12 statement: label_definition
rule 13 statement: conditional
rule 14 statement: inline_conditional
rule 15 statement: forloop
rule 16 statement: while_loop
rule 17 statement: use_statement
rule 18 statement: set_skip_statement
rule 19 statement: wait_statement
rule 20 statement: case_statement
rule 21 statement: fanuc_eval
rule 22 statement: timer_method
rule 23 statement: position_data
rule 24 statement: raise
rule 25 statement: tp_header_definition
rule 26 statement: empty_stmt
rule 27 statement: PAUSE
rule 28 statement: ABORT
rule 29 empty_stmt: NEWLINE
rule 30 tp_header_definition: TP_HEADER EQUAL tp_header_value
rule 31 tp_header_value: STRING
rule 32 tp_header_value: TRUE_FALSE
rule 33 raise: RAISE var_or_indirect
rule 34 timer_method: TIMER_METHOD var_or_indirect
rule 35 fanuc_eval: EVAL STRING
rule 36 wait_statement: WAIT_FOR LPAREN indirectable COMMA STRING RPAREN
rule 37 wait_statement: WAIT_UNTIL LPAREN expression RPAREN
rule 38 wait_statement: WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier
rule 39 wait_statement: WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier DOT wait_modifier
rule 40 wait_modifier: timeout_modifier
rule 41 wait_modifier: after_modifier
rule 42 timeout_modifier: swallow_newlines TIMEOUT LPAREN label RPAREN
rule 43 after_modifier: swallow_newlines AFTER LPAREN indirectable COMMA STRING RPAREN
rule 44 label: LABEL
rule 45 use_statement: FANUC_USE indirectable
rule 46 set_skip_statement: SET_SKIP_CONDITION expression
rule 47 program_call: WORD LPAREN args RPAREN
rule 48 program_call: RUN WORD LPAREN args RPAREN
rule 49 args: arg
rule 50 args: args COMMA arg
rule 51 args: 
rule 52 arg: number
rule 53 arg: var
rule 54 arg: string
rule 55 string: STRING
rule 56 io_method: IO_METHOD var_or_indirect
rule 57 io_method: IO_METHOD LPAREN var_or_indirect RPAREN
rule 58 io_method: IO_METHOD LPAREN var_or_indirect COMMA number COMMA STRING RPAREN
rule 59 var_or_indirect: var
rule 60 var_or_indirect: indirect_thing
rule 61 jump: JUMP label
rule 62 conditional: IF expression block else_block END
rule 63 conditional: UNLESS expression block else_block END
rule 64 forloop: FOR var IN LPAREN minmax_val TO minmax_val RPAREN block END
rule 65 while_loop: WHILE expression block END
rule 66 minmax_val: integer
rule 67 minmax_val: var
rule 68 namespace: NAMESPACE WORD block END
rule 69 case_statement: CASE var swallow_newlines case_conditions case_else END
rule 70 case_conditions: case_condition
rule 71 case_conditions: case_conditions case_condition
rule 72 case_condition: WHEN case_allowed_condition swallow_newlines case_allowed_statement terminator
rule 73 case_allowed_condition: number
rule 74 case_allowed_condition: var
rule 75 case_else: ELSE swallow_newlines case_allowed_statement terminator
rule 76 case_else: 
rule 77 case_allowed_statement: program_call
rule 78 case_allowed_statement: jump
rule 79 inline_conditional: inlineable
rule 80 inline_conditional: inlineable IF expression
rule 81 inline_conditional: inlineable UNLESS expression
rule 82 inlineable: jump
rule 83 inlineable: assignment
rule 84 inlineable: io_method
rule 85 inlineable: program_call
rule 86 else_block: ELSE block
rule 87 else_block: 
rule 88 motion_statement: MOVE DOT swallow_newlines TO LPAREN var RPAREN motion_modifiers
rule 89 motion_modifiers: motion_modifier
rule 90 motion_modifiers: motion_modifiers motion_modifier
rule 91 motion_modifier: DOT swallow_newlines AT LPAREN speed RPAREN
rule 92 motion_modifier: DOT swallow_newlines TERM LPAREN valid_terminations RPAREN
rule 93 motion_modifier: DOT swallow_newlines OFFSET LPAREN var RPAREN
rule 94 motion_modifier: DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN
rule 95 motion_modifier: DOT swallow_newlines SKIP LPAREN label optional_lpos_arg RPAREN
rule 96 valid_terminations: integer
rule 97 valid_terminations: var
rule 98 valid_terminations: MINUS DIGIT
rule 99 optional_lpos_arg: COMMA var
rule 100 optional_lpos_arg: 
rule 101 indirectable: number
rule 102 indirectable: var
rule 103 time_seg_actions: program_call
rule 104 time_seg_actions: io_method
rule 105 time: var
rule 106 time: number
rule 107 speed: indirectable COMMA STRING
rule 108 speed: STRING
rule 109 label_definition: label
rule 110 definition: WORD ASSIGN definable
rule 111 assignment: var_or_indirect EQUAL expression
rule 112 assignment: var_or_indirect PLUS EQUAL expression
rule 113 assignment: var_or_indirect MINUS EQUAL expression
rule 114 var: WORD
rule 115 var: WORD var_method_modifiers
rule 116 var: namespaces var
rule 117 var_method_modifiers: 
rule 118 var_method_modifiers: var_method_modifier
rule 119 var_method_modifiers: var_method_modifiers var_method_modifier
rule 120 var_method_modifier: DOT swallow_newlines GROUP
rule 121 var_method_modifier: DOT swallow_newlines WORD
rule 122 namespaces: WORD COLON COLON
rule 123 expression: factor
rule 124 expression: BANG factor
rule 125 expression: expression operator expression
rule 126 operator: EEQUAL
rule 127 operator: NOTEQUAL
rule 128 operator: LT
rule 129 operator: GT
rule 130 operator: GTE
rule 131 operator: LTE
rule 132 operator: PLUS
rule 133 operator: MINUS
rule 134 operator: OR
rule 135 operator: STAR
rule 136 operator: SLASH
rule 137 operator: DIV
rule 138 operator: MOD
rule 139 operator: AND
rule 140 factor: number
rule 141 factor: signed_number
rule 142 factor: var
rule 143 factor: indirect_thing
rule 144 factor: paren_expr
rule 145 paren_expr: LPAREN expression RPAREN
rule 146 indirect_thing: INDIRECT LPAREN STRING COMMA indirectable RPAREN
rule 147 signed_number: sign DIGIT
rule 148 signed_number: sign REAL
rule 149 sign: MINUS
rule 150 number: integer
rule 151 number: REAL
rule 152 integer: DIGIT
rule 153 definable: numreg
rule 154 definable: output
rule 155 definable: input
rule 156 definable: posreg
rule 157 definable: position
rule 158 definable: vreg
rule 159 definable: number
rule 160 definable: signed_number
rule 161 definable: argument
rule 162 definable: timer
rule 163 definable: ualm
rule 164 definable: sreg
rule 165 sreg: SREG LBRACK DIGIT RBRACK
rule 166 ualm: UALM LBRACK DIGIT RBRACK
rule 167 timer: TIMER LBRACK DIGIT RBRACK
rule 168 argument: ARG LBRACK DIGIT RBRACK
rule 169 vreg: VREG LBRACK DIGIT RBRACK
rule 170 position: POSITION LBRACK DIGIT RBRACK
rule 171 numreg: NUMREG LBRACK DIGIT RBRACK
rule 172 posreg: POSREG LBRACK DIGIT RBRACK
rule 173 output: OUTPUT LBRACK DIGIT RBRACK
rule 174 input: INPUT LBRACK DIGIT RBRACK
rule 175 comment: COMMENT
rule 176 terminator: NEWLINE
rule 177 terminator: comment optional_newline
rule 178 terminator: false
rule 179 terminator: 
rule 180 swallow_newlines: NEWLINE
rule 181 swallow_newlines: 
rule 182 position_data: POSITION_DATA sn hash sn END
rule 183 sn: swallow_newlines
rule 184 hash: LBRACE sn hash_attributes sn RBRACE
rule 185 hash: LBRACE sn RBRACE
rule 186 hash_attributes: hash_attribute
rule 187 hash_attributes: hash_attributes COMMA sn hash_attribute
rule 188 hash_attribute: STRING COLON hash_value
rule 189 hash_value: STRING
rule 190 hash_value: hash
rule 191 hash_value: array
rule 192 hash_value: optional_sign DIGIT
rule 193 hash_value: optional_sign REAL
rule 194 hash_value: TRUE_FALSE
rule 195 optional_sign: sign
rule 196 optional_sign: 
rule 197 array: LBRACK sn array_values sn RBRACK
rule 198 array_values: array_value
rule 199 array_values: array_values COMMA sn array_value
rule 200 array_value: hash_value

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (84)
    on right: 
    on left : 
  program (85)
    on right: 
    on left : 1 2
  statements (86)
    on right: 1 4 5
    on left : 3 4
  statement (87)
    on right: 3 4
    on left : 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
  terminator (88)
    on right: 3 4 72 75
    on left : 176 177 178 179
  block (89)
    on right: 62 63 64 65 68 86
    on left : 5
  optional_newline (90)
    on right: 177
    on left : 6 7
  comment (91)
    on right: 8 177
    on left : 175
  definition (92)
    on right: 9
    on left : 110
  namespace (93)
    on right: 10
    on left : 68
  motion_statement (94)
    on right: 11
    on left : 88
  label_definition (95)
    on right: 12
    on left : 109
  conditional (96)
    on right: 13
    on left : 62 63
  inline_conditional (97)
    on right: 14
    on left : 79 80 81
  forloop (98)
    on right: 15
    on left : 64
  while_loop (99)
    on right: 16
    on left : 65
  use_statement (100)
    on right: 17
    on left : 45
  set_skip_statement (101)
    on right: 18
    on left : 46
  wait_statement (102)
    on right: 19
    on left : 36 37 38 39
  case_statement (103)
    on right: 20
    on left : 69
  fanuc_eval (104)
    on right: 21
    on left : 35
  timer_method (105)
    on right: 22
    on left : 34
  position_data (106)
    on right: 23
    on left : 182
  raise (107)
    on right: 24
    on left : 33
  tp_header_definition (108)
    on right: 25
    on left : 30
  empty_stmt (109)
    on right: 26
    on left : 29
  tp_header_value (110)
    on right: 30
    on left : 31 32
  var_or_indirect (111)
    on right: 33 34 56 57 58 111 112 113
    on left : 59 60
  indirectable (112)
    on right: 36 43 45 107 146
    on left : 101 102
  expression (113)
    on right: 37 38 39 46 62 63 65 80 81 111 112 113 125 145
    on left : 123 124 125
  wait_modifier (114)
    on right: 38 39
    on left : 40 41
  timeout_modifier (115)
    on right: 40
    on left : 42
  after_modifier (116)
    on right: 41
    on left : 43
  swallow_newlines (117)
    on right: 42 43 69 72 75 88 91 92 93 94 95 120 121 183
    on left : 180 181
  label (118)
    on right: 42 61 95 109
    on left : 44
  program_call (119)
    on right: 77 85 103
    on left : 47 48
  args (120)
    on right: 47 48 50
    on left : 49 50 51
  arg (121)
    on right: 49 50
    on left : 52 53 54
  number (122)
    on right: 52 58 73 101 106 140 159
    on left : 150 151
  var (123)
    on right: 53 59 64 67 69 74 88 93 97 99 102 105 116 142
    on left : 114 115 116
  string (124)
    on right: 54
    on left : 55
  io_method (125)
    on right: 84 104
    on left : 56 57 58
  indirect_thing (126)
    on right: 60 143
    on left : 146
  jump (127)
    on right: 78 82
    on left : 61
  else_block (128)
    on right: 62 63
    on left : 86 87
  minmax_val (129)
    on right: 64
    on left : 66 67
  integer (130)
    on right: 66 96 150
    on left : 152
  case_conditions (131)
    on right: 69 71
    on left : 70 71
  case_else (132)
    on right: 69
    on left : 75 76
  case_condition (133)
    on right: 70 71
    on left : 72
  case_allowed_condition (134)
    on right: 72
    on left : 73 74
  case_allowed_statement (135)
    on right: 72 75
    on left : 77 78
  inlineable (136)
    on right: 79 80 81
    on left : 82 83 84 85
  assignment (137)
    on right: 83
    on left : 111 112 113
  motion_modifiers (138)
    on right: 88 90
    on left : 89 90
  motion_modifier (139)
    on right: 89 90
    on left : 91 92 93 94 95
  speed (140)
    on right: 91
    on left : 107 108
  valid_terminations (141)
    on right: 92
    on left : 96 97 98
  time (142)
    on right: 94
    on left : 105 106
  time_seg_actions (143)
    on right: 94
    on left : 103 104
  optional_lpos_arg (144)
    on right: 95
    on left : 99 100
  definable (145)
    on right: 110
    on left : 153 154 155 156 157 158 159 160 161 162 163 164
  var_method_modifiers (146)
    on right: 115 119
    on left : 117 118 119
  namespaces (147)
    on right: 116
    on left : 122
  var_method_modifier (148)
    on right: 118 119
    on left : 120 121
  factor (149)
    on right: 123 124
    on left : 140 141 142 143 144
  operator (150)
    on right: 125
    on left : 126 127 128 129 130 131 132 133 134 135 136 137 138 139
  signed_number (151)
    on right: 141 160
    on left : 147 148
  paren_expr (152)
    on right: 144
    on left : 145
  sign (153)
    on right: 147 148 195
    on left : 149
  numreg (154)
    on right: 153
    on left : 171
  output (155)
    on right: 154
    on left : 173
  input (156)
    on right: 155
    on left : 174
  posreg (157)
    on right: 156
    on left : 172
  position (158)
    on right: 157
    on left : 170
  vreg (159)
    on right: 158
    on left : 169
  argument (160)
    on right: 161
    on left : 168
  timer (161)
    on right: 162
    on left : 167
  ualm (162)
    on right: 163
    on left : 166
  sreg (163)
    on right: 164
    on left : 165
  sn (164)
    on right: 182 184 185 187 197 199
    on left : 183
  hash (165)
    on right: 182 190
    on left : 184 185
  hash_attributes (166)
    on right: 184 187
    on left : 186 187
  hash_attribute (167)
    on right: 186 187
    on left : 188
  hash_value (168)
    on right: 188 200
    on left : 189 190 191 192 193 194
  array (169)
    on right: 191
    on left : 197
  optional_sign (170)
    on right: 192 193
    on left : 195 196
  array_values (171)
    on right: 197 199
    on left : 198 199
  array_value (172)
    on right: 198 199
    on left : 200

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  ASSIGN (2) 110
  AT_SYM (3) 
  COMMENT (4) 175
  JUMP (5) 61
  IO_METHOD (6) 56 57 58
  INPUT (7) 174
  OUTPUT (8) 173
  NUMREG (9) 171
  POSREG (10) 172
  VREG (11) 169
  SREG (12) 165
  TIME_SEGMENT (13) 94
  ARG (14) 168
  UALM (15) 166
  MOVE (16) 88
  DOT (17) 38 39 88 91 92 93 94 95 120 121
  TO (18) 64 88
  AT (19) 91
  TERM (20) 92
  OFFSET (21) 93
  SKIP (22) 95
  GROUP (23) 120
  SEMICOLON (24) 
  NEWLINE (25) 5 6 29 176 180
  STRING (26) 31 35 36 43 55 58 107 108 146 188 189
  REAL (27) 148 151 193
  DIGIT (28) 98 147 152 165 166 167 168 169 170 171 172 173 174 192
  WORD (29) 47 48 68 110 114 115 121 122
  EQUAL (30) 30 111 112 113
  EEQUAL (31) 126
  NOTEQUAL (32) 127
  GTE (33) 130
  LTE (34) 131
  LT (35) 128
  GT (36) 129
  BANG (37) 124
  PLUS (38) 112 132
  MINUS (39) 98 113 133 149
  STAR (40) 135
  SLASH (41) 136
  DIV (42) 137
  AND (43) 139
  OR (44) 134
  MOD (45) 138
  IF (46) 62 80
  ELSE (47) 75 86
  END (48) 62 63 64 65 68 69 182
  UNLESS (49) 63 81
  FOR (50) 64
  IN (51) 64
  WHILE (52) 65
  WAIT_FOR (53) 36
  WAIT_UNTIL (54) 37 38 39
  TIMEOUT (55) 42
  AFTER (56) 43
  FANUC_USE (57) 45
  SET_SKIP_CONDITION (58) 46
  NAMESPACE (59) 68
  CASE (60) 69
  WHEN (61) 72
  INDIRECT (62) 146
  POSITION (63) 170
  EVAL (64) 35
  TIMER (65) 167
  TIMER_METHOD (66) 34
  RAISE (67) 33
  ABORT (68) 28
  POSITION_DATA (69) 182
  TRUE_FALSE (70) 32 194
  RUN (71) 48
  TP_HEADER (72) 30
  PAUSE (73) 27
  LPAREN (74) 36 37 38 39 42 43 47 48 57 58 64 88 91 92 93 94 95 145 146
  RPAREN (75) 36 37 38 39 42 43 47 48 57 58 64 88 91 92 93 94 95 145 146
  COLON (76) 122 188
  COMMA (77) 36 43 50 58 94 99 107 146 187 199
  LBRACK (78) 165 166 167 168 169 170 171 172 173 174 197
  RBRACK (79) 165 166 167 168 169 170 171 172 173 174 197
  LBRACE (80) 184 185
  RBRACE (81) 184 185
  LABEL (82) 44
  false (83) 178

--------- State ---------

state 0


  COMMENT       shift, and go to state 57
  JUMP          shift, and go to state 40
  IO_METHOD     shift, and go to state 37
  MOVE          shift, and go to state 52
  NEWLINE       shift, and go to state 25
  WORD          shift, and go to state 35
  IF            shift, and go to state 41
  UNLESS        shift, and go to state 42
  FOR           shift, and go to state 43
  WHILE         shift, and go to state 44
  WAIT_FOR      shift, and go to state 30
  WAIT_UNTIL    shift, and go to state 31
  FANUC_USE     shift, and go to state 33
  SET_SKIP_CONDITION  shift, and go to state 34
  NAMESPACE     shift, and go to state 45
  CASE          shift, and go to state 46
  INDIRECT      shift, and go to state 56
  EVAL          shift, and go to state 29
  TIMER_METHOD  shift, and go to state 28
  RAISE         shift, and go to state 27
  ABORT         shift, and go to state 24
  POSITION_DATA  shift, and go to state 58
  RUN           shift, and go to state 36
  TP_HEADER     shift, and go to state 26
  PAUSE         shift, and go to state 23
  LABEL         shift, and go to state 32
  $default      reduce using rule 2 (program)

  program       go to state 1
  statements    go to state 2
  statement     go to state 3
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  conditional   go to state 9
  inline_conditional  go to state 10
  forloop       go to state 11
  while_loop    go to state 12
  use_statement  go to state 13
  set_skip_statement  go to state 14
  wait_statement  go to state 15
  case_statement  go to state 16
  fanuc_eval    go to state 17
  timer_method  go to state 18
  position_data  go to state 19
  raise         go to state 20
  tp_header_definition  go to state 21
  empty_stmt    go to state 22
  var           go to state 38
  indirect_thing  go to state 39
  inlineable    go to state 47
  jump          go to state 48
  assignment    go to state 49
  io_method     go to state 50
  program_call  go to state 51
  label         go to state 53
  var_or_indirect  go to state 54
  namespaces    go to state 55

state 1


  $end          shift, and go to state 59


state 2

   1) program : statements _
   4) statements : statements _ statement terminator

  COMMENT       shift, and go to state 57
  JUMP          shift, and go to state 40
  IO_METHOD     shift, and go to state 37
  MOVE          shift, and go to state 52
  NEWLINE       shift, and go to state 25
  WORD          shift, and go to state 35
  IF            shift, and go to state 41
  UNLESS        shift, and go to state 42
  FOR           shift, and go to state 43
  WHILE         shift, and go to state 44
  WAIT_FOR      shift, and go to state 30
  WAIT_UNTIL    shift, and go to state 31
  FANUC_USE     shift, and go to state 33
  SET_SKIP_CONDITION  shift, and go to state 34
  NAMESPACE     shift, and go to state 45
  CASE          shift, and go to state 46
  INDIRECT      shift, and go to state 56
  EVAL          shift, and go to state 29
  TIMER_METHOD  shift, and go to state 28
  RAISE         shift, and go to state 27
  ABORT         shift, and go to state 24
  POSITION_DATA  shift, and go to state 58
  RUN           shift, and go to state 36
  TP_HEADER     shift, and go to state 26
  PAUSE         shift, and go to state 23
  LABEL         shift, and go to state 32
  $default      reduce using rule 1 (program)

  statement     go to state 60
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  conditional   go to state 9
  inline_conditional  go to state 10
  forloop       go to state 11
  while_loop    go to state 12
  use_statement  go to state 13
  set_skip_statement  go to state 14
  wait_statement  go to state 15
  case_statement  go to state 16
  fanuc_eval    go to state 17
  timer_method  go to state 18
  position_data  go to state 19
  raise         go to state 20
  tp_header_definition  go to state 21
  empty_stmt    go to state 22
  var           go to state 38
  indirect_thing  go to state 39
  inlineable    go to state 47
  jump          go to state 48
  assignment    go to state 49
  io_method     go to state 50
  program_call  go to state 51
  label         go to state 53
  var_or_indirect  go to state 54
  namespaces    go to state 55

state 3

   3) statements : statement _ terminator

  COMMENT       shift, and go to state 57
  COMMENT       [reduce using rule 179 (terminator)]
  NEWLINE       shift, and go to state 62
  NEWLINE       [reduce using rule 179 (terminator)]
  false         shift, and go to state 64
  $default      reduce using rule 179 (terminator)

  terminator    go to state 61
  comment       go to state 63

state 4

   8) statement : comment _

  $default      reduce using rule 8 (statement)


state 5

   9) statement : definition _

  $default      reduce using rule 9 (statement)


state 6

  10) statement : namespace _

  $default      reduce using rule 10 (statement)


state 7

  11) statement : motion_statement _

  $default      reduce using rule 11 (statement)


state 8

  12) statement : label_definition _

  $default      reduce using rule 12 (statement)


state 9

  13) statement : conditional _

  $default      reduce using rule 13 (statement)


state 10

  14) statement : inline_conditional _

  $default      reduce using rule 14 (statement)


state 11

  15) statement : forloop _

  $default      reduce using rule 15 (statement)


state 12

  16) statement : while_loop _

  $default      reduce using rule 16 (statement)


state 13

  17) statement : use_statement _

  $default      reduce using rule 17 (statement)


state 14

  18) statement : set_skip_statement _

  $default      reduce using rule 18 (statement)


state 15

  19) statement : wait_statement _

  $default      reduce using rule 19 (statement)


state 16

  20) statement : case_statement _

  $default      reduce using rule 20 (statement)


state 17

  21) statement : fanuc_eval _

  $default      reduce using rule 21 (statement)


state 18

  22) statement : timer_method _

  $default      reduce using rule 22 (statement)


state 19

  23) statement : position_data _

  $default      reduce using rule 23 (statement)


state 20

  24) statement : raise _

  $default      reduce using rule 24 (statement)


state 21

  25) statement : tp_header_definition _

  $default      reduce using rule 25 (statement)


state 22

  26) statement : empty_stmt _

  $default      reduce using rule 26 (statement)


state 23

  27) statement : PAUSE _

  $default      reduce using rule 27 (statement)


state 24

  28) statement : ABORT _

  $default      reduce using rule 28 (statement)


state 25

  29) empty_stmt : NEWLINE _

  $default      reduce using rule 29 (empty_stmt)


state 26

  30) tp_header_definition : TP_HEADER _ EQUAL tp_header_value

  EQUAL         shift, and go to state 65


state 27

  33) raise : RAISE _ var_or_indirect

  WORD          shift, and go to state 67
  INDIRECT      shift, and go to state 56

  var_or_indirect  go to state 66
  var           go to state 38
  indirect_thing  go to state 39
  namespaces    go to state 55

state 28

  34) timer_method : TIMER_METHOD _ var_or_indirect

  WORD          shift, and go to state 67
  INDIRECT      shift, and go to state 56

  var_or_indirect  go to state 68
  var           go to state 38
  indirect_thing  go to state 39
  namespaces    go to state 55

state 29

  35) fanuc_eval : EVAL _ STRING

  STRING        shift, and go to state 69


state 30

  36) wait_statement : WAIT_FOR _ LPAREN indirectable COMMA STRING RPAREN

  LPAREN        shift, and go to state 70


state 31

  37) wait_statement : WAIT_UNTIL _ LPAREN expression RPAREN
  38) wait_statement : WAIT_UNTIL _ LPAREN expression RPAREN DOT wait_modifier
  39) wait_statement : WAIT_UNTIL _ LPAREN expression RPAREN DOT wait_modifier DOT wait_modifier

  LPAREN        shift, and go to state 71


state 32

  44) label : LABEL _

  $default      reduce using rule 44 (label)


state 33

  45) use_statement : FANUC_USE _ indirectable

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  indirectable  go to state 72
  number        go to state 73
  var           go to state 74
  namespaces    go to state 55
  integer       go to state 75

state 34

  46) set_skip_statement : SET_SKIP_CONDITION _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 78
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 35

  47) program_call : WORD _ LPAREN args RPAREN
 110) definition : WORD _ ASSIGN definable
 114) var : WORD _
 115) var : WORD _ var_method_modifiers
 122) namespaces : WORD _ COLON COLON

  ASSIGN        shift, and go to state 90
  DOT           shift, and go to state 93
  DOT           [reduce using rule 117 (var_method_modifiers)]
  LPAREN        shift, and go to state 89
  COLON         shift, and go to state 94
  EQUAL         [reduce using rule 117 (var_method_modifiers)]
  PLUS          [reduce using rule 117 (var_method_modifiers)]
  MINUS         [reduce using rule 117 (var_method_modifiers)]
  $default      reduce using rule 114 (var)

  var_method_modifiers  go to state 91
  var_method_modifier  go to state 92

state 36

  48) program_call : RUN _ WORD LPAREN args RPAREN

  WORD          shift, and go to state 95


state 37

  56) io_method : IO_METHOD _ var_or_indirect
  57) io_method : IO_METHOD _ LPAREN var_or_indirect RPAREN
  58) io_method : IO_METHOD _ LPAREN var_or_indirect COMMA number COMMA STRING RPAREN

  WORD          shift, and go to state 67
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 97

  var_or_indirect  go to state 96
  var           go to state 38
  indirect_thing  go to state 39
  namespaces    go to state 55

state 38

  59) var_or_indirect : var _

  $default      reduce using rule 59 (var_or_indirect)


state 39

  60) var_or_indirect : indirect_thing _

  $default      reduce using rule 60 (var_or_indirect)


state 40

  61) jump : JUMP _ label

  LABEL         shift, and go to state 32

  label         go to state 98

state 41

  62) conditional : IF _ expression block else_block END

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 99
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 42

  63) conditional : UNLESS _ expression block else_block END

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 100
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 43

  64) forloop : FOR _ var IN LPAREN minmax_val TO minmax_val RPAREN block END

  WORD          shift, and go to state 67

  var           go to state 101
  namespaces    go to state 55

state 44

  65) while_loop : WHILE _ expression block END

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 102
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 45

  68) namespace : NAMESPACE _ WORD block END

  WORD          shift, and go to state 103


state 46

  69) case_statement : CASE _ var swallow_newlines case_conditions case_else END

  WORD          shift, and go to state 67

  var           go to state 104
  namespaces    go to state 55

state 47

  79) inline_conditional : inlineable _
  80) inline_conditional : inlineable _ IF expression
  81) inline_conditional : inlineable _ UNLESS expression

  IF            shift, and go to state 105
  IF            [reduce using rule 79 (inline_conditional)]
  UNLESS        shift, and go to state 106
  UNLESS        [reduce using rule 79 (inline_conditional)]
  $default      reduce using rule 79 (inline_conditional)


state 48

  82) inlineable : jump _

  $default      reduce using rule 82 (inlineable)


state 49

  83) inlineable : assignment _

  $default      reduce using rule 83 (inlineable)


state 50

  84) inlineable : io_method _

  $default      reduce using rule 84 (inlineable)


state 51

  85) inlineable : program_call _

  $default      reduce using rule 85 (inlineable)


state 52

  88) motion_statement : MOVE _ DOT swallow_newlines TO LPAREN var RPAREN motion_modifiers

  DOT           shift, and go to state 107


state 53

 109) label_definition : label _

  $default      reduce using rule 109 (label_definition)


state 54

 111) assignment : var_or_indirect _ EQUAL expression
 112) assignment : var_or_indirect _ PLUS EQUAL expression
 113) assignment : var_or_indirect _ MINUS EQUAL expression

  EQUAL         shift, and go to state 108
  PLUS          shift, and go to state 109
  MINUS         shift, and go to state 110


state 55

 116) var : namespaces _ var

  WORD          shift, and go to state 67

  namespaces    go to state 55
  var           go to state 111

state 56

 146) indirect_thing : INDIRECT _ LPAREN STRING COMMA indirectable RPAREN

  LPAREN        shift, and go to state 112


state 57

 175) comment : COMMENT _

  $default      reduce using rule 175 (comment)


state 58

 182) position_data : POSITION_DATA _ sn hash sn END

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  sn            go to state 114
  swallow_newlines  go to state 115

state 59


  $end          shift, and go to state 116


state 60

   4) statements : statements statement _ terminator

  COMMENT       shift, and go to state 57
  COMMENT       [reduce using rule 179 (terminator)]
  NEWLINE       shift, and go to state 62
  NEWLINE       [reduce using rule 179 (terminator)]
  false         shift, and go to state 64
  $default      reduce using rule 179 (terminator)

  terminator    go to state 117
  comment       go to state 63

state 61

   3) statements : statement terminator _

  $default      reduce using rule 3 (statements)


state 62

 176) terminator : NEWLINE _

  $default      reduce using rule 176 (terminator)


state 63

 177) terminator : comment _ optional_newline

  NEWLINE       shift, and go to state 118
  NEWLINE       [reduce using rule 7 (optional_newline)]
  $default      reduce using rule 7 (optional_newline)

  optional_newline  go to state 119

state 64

 178) terminator : false _

  $default      reduce using rule 178 (terminator)


state 65

  30) tp_header_definition : TP_HEADER EQUAL _ tp_header_value

  STRING        shift, and go to state 121
  TRUE_FALSE    shift, and go to state 122

  tp_header_value  go to state 120

state 66

  33) raise : RAISE var_or_indirect _

  $default      reduce using rule 33 (raise)


state 67

 114) var : WORD _
 115) var : WORD _ var_method_modifiers
 122) namespaces : WORD _ COLON COLON

  DOT           shift, and go to state 93
  DOT           [reduce using rule 117 (var_method_modifiers)]
  COLON         shift, and go to state 94
  $end          [reduce using rule 117 (var_method_modifiers)]
  COMMENT       [reduce using rule 117 (var_method_modifiers)]
  JUMP          [reduce using rule 117 (var_method_modifiers)]
  IO_METHOD     [reduce using rule 117 (var_method_modifiers)]
  MOVE          [reduce using rule 117 (var_method_modifiers)]
  TO            [reduce using rule 117 (var_method_modifiers)]
  NEWLINE       [reduce using rule 117 (var_method_modifiers)]
  WORD          [reduce using rule 117 (var_method_modifiers)]
  EQUAL         [reduce using rule 117 (var_method_modifiers)]
  EEQUAL        [reduce using rule 117 (var_method_modifiers)]
  NOTEQUAL      [reduce using rule 117 (var_method_modifiers)]
  GTE           [reduce using rule 117 (var_method_modifiers)]
  LTE           [reduce using rule 117 (var_method_modifiers)]
  LT            [reduce using rule 117 (var_method_modifiers)]
  GT            [reduce using rule 117 (var_method_modifiers)]
  PLUS          [reduce using rule 117 (var_method_modifiers)]
  MINUS         [reduce using rule 117 (var_method_modifiers)]
  STAR          [reduce using rule 117 (var_method_modifiers)]
  SLASH         [reduce using rule 117 (var_method_modifiers)]
  DIV           [reduce using rule 117 (var_method_modifiers)]
  AND           [reduce using rule 117 (var_method_modifiers)]
  OR            [reduce using rule 117 (var_method_modifiers)]
  MOD           [reduce using rule 117 (var_method_modifiers)]
  IF            [reduce using rule 117 (var_method_modifiers)]
  ELSE          [reduce using rule 117 (var_method_modifiers)]
  END           [reduce using rule 117 (var_method_modifiers)]
  UNLESS        [reduce using rule 117 (var_method_modifiers)]
  FOR           [reduce using rule 117 (var_method_modifiers)]
  IN            [reduce using rule 117 (var_method_modifiers)]
  WHILE         [reduce using rule 117 (var_method_modifiers)]
  WAIT_FOR      [reduce using rule 117 (var_method_modifiers)]
  WAIT_UNTIL    [reduce using rule 117 (var_method_modifiers)]
  FANUC_USE     [reduce using rule 117 (var_method_modifiers)]
  SET_SKIP_CONDITION  [reduce using rule 117 (var_method_modifiers)]
  NAMESPACE     [reduce using rule 117 (var_method_modifiers)]
  CASE          [reduce using rule 117 (var_method_modifiers)]
  WHEN          [reduce using rule 117 (var_method_modifiers)]
  INDIRECT      [reduce using rule 117 (var_method_modifiers)]
  EVAL          [reduce using rule 117 (var_method_modifiers)]
  TIMER_METHOD  [reduce using rule 117 (var_method_modifiers)]
  RAISE         [reduce using rule 117 (var_method_modifiers)]
  ABORT         [reduce using rule 117 (var_method_modifiers)]
  POSITION_DATA  [reduce using rule 117 (var_method_modifiers)]
  RUN           [reduce using rule 117 (var_method_modifiers)]
  TP_HEADER     [reduce using rule 117 (var_method_modifiers)]
  PAUSE         [reduce using rule 117 (var_method_modifiers)]
  RPAREN        [reduce using rule 117 (var_method_modifiers)]
  COMMA         [reduce using rule 117 (var_method_modifiers)]
  LABEL         [reduce using rule 117 (var_method_modifiers)]
  false         [reduce using rule 117 (var_method_modifiers)]
  $default      reduce using rule 114 (var)

  var_method_modifiers  go to state 91
  var_method_modifier  go to state 92

state 68

  34) timer_method : TIMER_METHOD var_or_indirect _

  $default      reduce using rule 34 (timer_method)


state 69

  35) fanuc_eval : EVAL STRING _

  $default      reduce using rule 35 (fanuc_eval)


state 70

  36) wait_statement : WAIT_FOR LPAREN _ indirectable COMMA STRING RPAREN

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  indirectable  go to state 123
  number        go to state 73
  var           go to state 74
  namespaces    go to state 55
  integer       go to state 75

state 71

  37) wait_statement : WAIT_UNTIL LPAREN _ expression RPAREN
  38) wait_statement : WAIT_UNTIL LPAREN _ expression RPAREN DOT wait_modifier
  39) wait_statement : WAIT_UNTIL LPAREN _ expression RPAREN DOT wait_modifier DOT wait_modifier

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 124
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 72

  45) use_statement : FANUC_USE indirectable _

  $default      reduce using rule 45 (use_statement)


state 73

 101) indirectable : number _

  $default      reduce using rule 101 (indirectable)


state 74

 102) indirectable : var _

  $default      reduce using rule 102 (indirectable)


state 75

 150) number : integer _

  $default      reduce using rule 150 (number)


state 76

 151) number : REAL _

  $default      reduce using rule 151 (number)


state 77

 152) integer : DIGIT _

  $default      reduce using rule 152 (integer)


state 78

  46) set_skip_statement : SET_SKIP_CONDITION expression _
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  $default      reduce using rule 46 (set_skip_statement)

  operator      go to state 125

state 79

 123) expression : factor _

  $default      reduce using rule 123 (expression)


state 80

 124) expression : BANG _ factor

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  namespaces    go to state 55
  factor        go to state 140
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 81

 140) factor : number _

  $default      reduce using rule 140 (factor)


state 82

 141) factor : signed_number _

  $default      reduce using rule 141 (factor)


state 83

 142) factor : var _

  $default      reduce using rule 142 (factor)


state 84

 143) factor : indirect_thing _

  $default      reduce using rule 143 (factor)


state 85

 144) factor : paren_expr _

  $default      reduce using rule 144 (factor)


state 86

 145) paren_expr : LPAREN _ expression RPAREN

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  namespaces    go to state 55
  factor        go to state 79
  expression    go to state 141
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 87

 147) signed_number : sign _ DIGIT
 148) signed_number : sign _ REAL

  REAL          shift, and go to state 143
  DIGIT         shift, and go to state 142


state 88

 149) sign : MINUS _

  $default      reduce using rule 149 (sign)


state 89

  47) program_call : WORD LPAREN _ args RPAREN

  STRING        shift, and go to state 149
  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  $default      reduce using rule 51 (args)

  args          go to state 144
  arg           go to state 145
  number        go to state 146
  var           go to state 147
  string        go to state 148
  namespaces    go to state 55
  integer       go to state 75

state 90

 110) definition : WORD ASSIGN _ definable

  INPUT         shift, and go to state 172
  OUTPUT        shift, and go to state 171
  NUMREG        shift, and go to state 169
  POSREG        shift, and go to state 170
  VREG          shift, and go to state 167
  SREG          shift, and go to state 163
  ARG           shift, and go to state 166
  UALM          shift, and go to state 164
  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  MINUS         shift, and go to state 88
  POSITION      shift, and go to state 168
  TIMER         shift, and go to state 165

  definable     go to state 150
  sign          go to state 87
  integer       go to state 75
  numreg        go to state 151
  output        go to state 152
  input         go to state 153
  posreg        go to state 154
  position      go to state 155
  vreg          go to state 156
  number        go to state 157
  signed_number  go to state 158
  argument      go to state 159
  timer         go to state 160
  ualm          go to state 161
  sreg          go to state 162

state 91

 115) var : WORD var_method_modifiers _
 119) var_method_modifiers : var_method_modifiers _ var_method_modifier

  DOT           shift, and go to state 93
  $default      reduce using rule 115 (var)

  var_method_modifier  go to state 173

state 92

 118) var_method_modifiers : var_method_modifier _

  $default      reduce using rule 118 (var_method_modifiers)


state 93

 120) var_method_modifier : DOT _ swallow_newlines GROUP
 121) var_method_modifier : DOT _ swallow_newlines WORD

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 174

state 94

 122) namespaces : WORD COLON _ COLON

  COLON         shift, and go to state 175


state 95

  48) program_call : RUN WORD _ LPAREN args RPAREN

  LPAREN        shift, and go to state 176


state 96

  56) io_method : IO_METHOD var_or_indirect _

  $default      reduce using rule 56 (io_method)


state 97

  57) io_method : IO_METHOD LPAREN _ var_or_indirect RPAREN
  58) io_method : IO_METHOD LPAREN _ var_or_indirect COMMA number COMMA STRING RPAREN

  WORD          shift, and go to state 67
  INDIRECT      shift, and go to state 56

  var_or_indirect  go to state 177
  var           go to state 38
  indirect_thing  go to state 39
  namespaces    go to state 55

state 98

  61) jump : JUMP label _

  $default      reduce using rule 61 (jump)


state 99

  62) conditional : IF expression _ block else_block END
 125) expression : expression _ operator expression

  NEWLINE       shift, and go to state 178
  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138

  block         go to state 179
  operator      go to state 125

state 100

  63) conditional : UNLESS expression _ block else_block END
 125) expression : expression _ operator expression

  NEWLINE       shift, and go to state 178
  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138

  block         go to state 180
  operator      go to state 125

state 101

  64) forloop : FOR var _ IN LPAREN minmax_val TO minmax_val RPAREN block END

  IN            shift, and go to state 181


state 102

  65) while_loop : WHILE expression _ block END
 125) expression : expression _ operator expression

  NEWLINE       shift, and go to state 178
  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138

  block         go to state 182
  operator      go to state 125

state 103

  68) namespace : NAMESPACE WORD _ block END

  NEWLINE       shift, and go to state 178

  block         go to state 183

state 104

  69) case_statement : CASE var _ swallow_newlines case_conditions case_else END

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 184

state 105

  80) inline_conditional : inlineable IF _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 185
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 106

  81) inline_conditional : inlineable UNLESS _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 186
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 107

  88) motion_statement : MOVE DOT _ swallow_newlines TO LPAREN var RPAREN motion_modifiers

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 187

state 108

 111) assignment : var_or_indirect EQUAL _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 188
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 109

 112) assignment : var_or_indirect PLUS _ EQUAL expression

  EQUAL         shift, and go to state 189


state 110

 113) assignment : var_or_indirect MINUS _ EQUAL expression

  EQUAL         shift, and go to state 190


state 111

 116) var : namespaces var _

  $default      reduce using rule 116 (var)


state 112

 146) indirect_thing : INDIRECT LPAREN _ STRING COMMA indirectable RPAREN

  STRING        shift, and go to state 191


state 113

 180) swallow_newlines : NEWLINE _

  $default      reduce using rule 180 (swallow_newlines)


state 114

 182) position_data : POSITION_DATA sn _ hash sn END

  LBRACE        shift, and go to state 193

  hash          go to state 192

state 115

 183) sn : swallow_newlines _

  $default      reduce using rule 183 (sn)


state 116


  $default      accept


state 117

   4) statements : statements statement terminator _

  $default      reduce using rule 4 (statements)


state 118

   6) optional_newline : NEWLINE _

  $default      reduce using rule 6 (optional_newline)


state 119

 177) terminator : comment optional_newline _

  $default      reduce using rule 177 (terminator)


state 120

  30) tp_header_definition : TP_HEADER EQUAL tp_header_value _

  $default      reduce using rule 30 (tp_header_definition)


state 121

  31) tp_header_value : STRING _

  $default      reduce using rule 31 (tp_header_value)


state 122

  32) tp_header_value : TRUE_FALSE _

  $default      reduce using rule 32 (tp_header_value)


state 123

  36) wait_statement : WAIT_FOR LPAREN indirectable _ COMMA STRING RPAREN

  COMMA         shift, and go to state 194


state 124

  37) wait_statement : WAIT_UNTIL LPAREN expression _ RPAREN
  38) wait_statement : WAIT_UNTIL LPAREN expression _ RPAREN DOT wait_modifier
  39) wait_statement : WAIT_UNTIL LPAREN expression _ RPAREN DOT wait_modifier DOT wait_modifier
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  RPAREN        shift, and go to state 195

  operator      go to state 125

state 125

 125) expression : expression operator _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  namespaces    go to state 55
  factor        go to state 79
  expression    go to state 196
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 126

 126) operator : EEQUAL _

  $default      reduce using rule 126 (operator)


state 127

 127) operator : NOTEQUAL _

  $default      reduce using rule 127 (operator)


state 128

 128) operator : LT _

  $default      reduce using rule 128 (operator)


state 129

 129) operator : GT _

  $default      reduce using rule 129 (operator)


state 130

 130) operator : GTE _

  $default      reduce using rule 130 (operator)


state 131

 131) operator : LTE _

  $default      reduce using rule 131 (operator)


state 132

 132) operator : PLUS _

  $default      reduce using rule 132 (operator)


state 133

 133) operator : MINUS _

  $default      reduce using rule 133 (operator)


state 134

 134) operator : OR _

  $default      reduce using rule 134 (operator)


state 135

 135) operator : STAR _

  $default      reduce using rule 135 (operator)


state 136

 136) operator : SLASH _

  $default      reduce using rule 136 (operator)


state 137

 137) operator : DIV _

  $default      reduce using rule 137 (operator)


state 138

 138) operator : MOD _

  $default      reduce using rule 138 (operator)


state 139

 139) operator : AND _

  $default      reduce using rule 139 (operator)


state 140

 124) expression : BANG factor _

  $default      reduce using rule 124 (expression)


state 141

 125) expression : expression _ operator expression
 145) paren_expr : LPAREN expression _ RPAREN

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  RPAREN        shift, and go to state 197

  operator      go to state 125

state 142

 147) signed_number : sign DIGIT _

  $default      reduce using rule 147 (signed_number)


state 143

 148) signed_number : sign REAL _

  $default      reduce using rule 148 (signed_number)


state 144

  47) program_call : WORD LPAREN args _ RPAREN
  50) args : args _ COMMA arg

  RPAREN        shift, and go to state 198
  COMMA         shift, and go to state 199


state 145

  49) args : arg _

  $default      reduce using rule 49 (args)


state 146

  52) arg : number _

  $default      reduce using rule 52 (arg)


state 147

  53) arg : var _

  $default      reduce using rule 53 (arg)


state 148

  54) arg : string _

  $default      reduce using rule 54 (arg)


state 149

  55) string : STRING _

  $default      reduce using rule 55 (string)


state 150

 110) definition : WORD ASSIGN definable _

  $default      reduce using rule 110 (definition)


state 151

 153) definable : numreg _

  $default      reduce using rule 153 (definable)


state 152

 154) definable : output _

  $default      reduce using rule 154 (definable)


state 153

 155) definable : input _

  $default      reduce using rule 155 (definable)


state 154

 156) definable : posreg _

  $default      reduce using rule 156 (definable)


state 155

 157) definable : position _

  $default      reduce using rule 157 (definable)


state 156

 158) definable : vreg _

  $default      reduce using rule 158 (definable)


state 157

 159) definable : number _

  $default      reduce using rule 159 (definable)


state 158

 160) definable : signed_number _

  $default      reduce using rule 160 (definable)


state 159

 161) definable : argument _

  $default      reduce using rule 161 (definable)


state 160

 162) definable : timer _

  $default      reduce using rule 162 (definable)


state 161

 163) definable : ualm _

  $default      reduce using rule 163 (definable)


state 162

 164) definable : sreg _

  $default      reduce using rule 164 (definable)


state 163

 165) sreg : SREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 200


state 164

 166) ualm : UALM _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 201


state 165

 167) timer : TIMER _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 202


state 166

 168) argument : ARG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 203


state 167

 169) vreg : VREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 204


state 168

 170) position : POSITION _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 205


state 169

 171) numreg : NUMREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 206


state 170

 172) posreg : POSREG _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 207


state 171

 173) output : OUTPUT _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 208


state 172

 174) input : INPUT _ LBRACK DIGIT RBRACK

  LBRACK        shift, and go to state 209


state 173

 119) var_method_modifiers : var_method_modifiers var_method_modifier _

  $default      reduce using rule 119 (var_method_modifiers)


state 174

 120) var_method_modifier : DOT swallow_newlines _ GROUP
 121) var_method_modifier : DOT swallow_newlines _ WORD

  GROUP         shift, and go to state 210
  WORD          shift, and go to state 211


state 175

 122) namespaces : WORD COLON COLON _

  $default      reduce using rule 122 (namespaces)


state 176

  48) program_call : RUN WORD LPAREN _ args RPAREN

  STRING        shift, and go to state 149
  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  $default      reduce using rule 51 (args)

  args          go to state 212
  arg           go to state 145
  number        go to state 146
  var           go to state 147
  string        go to state 148
  namespaces    go to state 55
  integer       go to state 75

state 177

  57) io_method : IO_METHOD LPAREN var_or_indirect _ RPAREN
  58) io_method : IO_METHOD LPAREN var_or_indirect _ COMMA number COMMA STRING RPAREN

  RPAREN        shift, and go to state 213
  COMMA         shift, and go to state 214


state 178

   5) block : NEWLINE _ statements

  COMMENT       shift, and go to state 57
  JUMP          shift, and go to state 40
  IO_METHOD     shift, and go to state 37
  MOVE          shift, and go to state 52
  NEWLINE       shift, and go to state 25
  WORD          shift, and go to state 35
  IF            shift, and go to state 41
  UNLESS        shift, and go to state 42
  FOR           shift, and go to state 43
  WHILE         shift, and go to state 44
  WAIT_FOR      shift, and go to state 30
  WAIT_UNTIL    shift, and go to state 31
  FANUC_USE     shift, and go to state 33
  SET_SKIP_CONDITION  shift, and go to state 34
  NAMESPACE     shift, and go to state 45
  CASE          shift, and go to state 46
  INDIRECT      shift, and go to state 56
  EVAL          shift, and go to state 29
  TIMER_METHOD  shift, and go to state 28
  RAISE         shift, and go to state 27
  ABORT         shift, and go to state 24
  POSITION_DATA  shift, and go to state 58
  RUN           shift, and go to state 36
  TP_HEADER     shift, and go to state 26
  PAUSE         shift, and go to state 23
  LABEL         shift, and go to state 32

  statement     go to state 3
  statements    go to state 215
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  conditional   go to state 9
  inline_conditional  go to state 10
  forloop       go to state 11
  while_loop    go to state 12
  use_statement  go to state 13
  set_skip_statement  go to state 14
  wait_statement  go to state 15
  case_statement  go to state 16
  fanuc_eval    go to state 17
  timer_method  go to state 18
  position_data  go to state 19
  raise         go to state 20
  tp_header_definition  go to state 21
  empty_stmt    go to state 22
  var           go to state 38
  indirect_thing  go to state 39
  inlineable    go to state 47
  jump          go to state 48
  assignment    go to state 49
  io_method     go to state 50
  program_call  go to state 51
  label         go to state 53
  var_or_indirect  go to state 54
  namespaces    go to state 55

state 179

  62) conditional : IF expression block _ else_block END

  ELSE          shift, and go to state 217
  $default      reduce using rule 87 (else_block)

  else_block    go to state 216

state 180

  63) conditional : UNLESS expression block _ else_block END

  ELSE          shift, and go to state 217
  $default      reduce using rule 87 (else_block)

  else_block    go to state 218

state 181

  64) forloop : FOR var IN _ LPAREN minmax_val TO minmax_val RPAREN block END

  LPAREN        shift, and go to state 219


state 182

  65) while_loop : WHILE expression block _ END

  END           shift, and go to state 220


state 183

  68) namespace : NAMESPACE WORD block _ END

  END           shift, and go to state 221


state 184

  69) case_statement : CASE var swallow_newlines _ case_conditions case_else END

  WHEN          shift, and go to state 224

  case_conditions  go to state 222
  case_condition  go to state 223

state 185

  80) inline_conditional : inlineable IF expression _
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  $default      reduce using rule 80 (inline_conditional)

  operator      go to state 125

state 186

  81) inline_conditional : inlineable UNLESS expression _
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  $default      reduce using rule 81 (inline_conditional)

  operator      go to state 125

state 187

  88) motion_statement : MOVE DOT swallow_newlines _ TO LPAREN var RPAREN motion_modifiers

  TO            shift, and go to state 225


state 188

 111) assignment : var_or_indirect EQUAL expression _
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  $default      reduce using rule 111 (assignment)

  operator      go to state 125

state 189

 112) assignment : var_or_indirect PLUS EQUAL _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 226
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 190

 113) assignment : var_or_indirect MINUS EQUAL _ expression

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  BANG          shift, and go to state 80
  MINUS         shift, and go to state 88
  INDIRECT      shift, and go to state 56
  LPAREN        shift, and go to state 86

  expression    go to state 227
  namespaces    go to state 55
  factor        go to state 79
  number        go to state 81
  signed_number  go to state 82
  var           go to state 83
  indirect_thing  go to state 84
  paren_expr    go to state 85
  sign          go to state 87
  integer       go to state 75

state 191

 146) indirect_thing : INDIRECT LPAREN STRING _ COMMA indirectable RPAREN

  COMMA         shift, and go to state 228


state 192

 182) position_data : POSITION_DATA sn hash _ sn END

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  sn            go to state 229
  swallow_newlines  go to state 115

state 193

 184) hash : LBRACE _ sn hash_attributes sn RBRACE
 185) hash : LBRACE _ sn RBRACE

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 115
  sn            go to state 230

state 194

  36) wait_statement : WAIT_FOR LPAREN indirectable COMMA _ STRING RPAREN

  STRING        shift, and go to state 231


state 195

  37) wait_statement : WAIT_UNTIL LPAREN expression RPAREN _
  38) wait_statement : WAIT_UNTIL LPAREN expression RPAREN _ DOT wait_modifier
  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN _ DOT wait_modifier DOT wait_modifier

  DOT           shift, and go to state 232
  $default      reduce using rule 37 (wait_statement)


state 196

 125) expression : expression _ operator expression
 125) expression : expression operator expression _

  EEQUAL        shift, and go to state 126
  EEQUAL        [reduce using rule 125 (expression)]
  NOTEQUAL      shift, and go to state 127
  NOTEQUAL      [reduce using rule 125 (expression)]
  GTE           shift, and go to state 130
  GTE           [reduce using rule 125 (expression)]
  LTE           shift, and go to state 131
  LTE           [reduce using rule 125 (expression)]
  LT            shift, and go to state 128
  LT            [reduce using rule 125 (expression)]
  GT            shift, and go to state 129
  GT            [reduce using rule 125 (expression)]
  PLUS          shift, and go to state 132
  PLUS          [reduce using rule 125 (expression)]
  MINUS         shift, and go to state 133
  MINUS         [reduce using rule 125 (expression)]
  STAR          shift, and go to state 135
  STAR          [reduce using rule 125 (expression)]
  SLASH         shift, and go to state 136
  SLASH         [reduce using rule 125 (expression)]
  DIV           shift, and go to state 137
  DIV           [reduce using rule 125 (expression)]
  AND           shift, and go to state 139
  AND           [reduce using rule 125 (expression)]
  OR            shift, and go to state 134
  OR            [reduce using rule 125 (expression)]
  MOD           shift, and go to state 138
  MOD           [reduce using rule 125 (expression)]
  $default      reduce using rule 125 (expression)

  operator      go to state 125

state 197

 145) paren_expr : LPAREN expression RPAREN _

  $default      reduce using rule 145 (paren_expr)


state 198

  47) program_call : WORD LPAREN args RPAREN _

  $default      reduce using rule 47 (program_call)


state 199

  50) args : args COMMA _ arg

  STRING        shift, and go to state 149
  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  arg           go to state 233
  number        go to state 146
  var           go to state 147
  string        go to state 148
  namespaces    go to state 55
  integer       go to state 75

state 200

 165) sreg : SREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 234


state 201

 166) ualm : UALM LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 235


state 202

 167) timer : TIMER LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 236


state 203

 168) argument : ARG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 237


state 204

 169) vreg : VREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 238


state 205

 170) position : POSITION LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 239


state 206

 171) numreg : NUMREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 240


state 207

 172) posreg : POSREG LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 241


state 208

 173) output : OUTPUT LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 242


state 209

 174) input : INPUT LBRACK _ DIGIT RBRACK

  DIGIT         shift, and go to state 243


state 210

 120) var_method_modifier : DOT swallow_newlines GROUP _

  $default      reduce using rule 120 (var_method_modifier)


state 211

 121) var_method_modifier : DOT swallow_newlines WORD _

  $default      reduce using rule 121 (var_method_modifier)


state 212

  48) program_call : RUN WORD LPAREN args _ RPAREN
  50) args : args _ COMMA arg

  RPAREN        shift, and go to state 244
  COMMA         shift, and go to state 199


state 213

  57) io_method : IO_METHOD LPAREN var_or_indirect RPAREN _

  $default      reduce using rule 57 (io_method)


state 214

  58) io_method : IO_METHOD LPAREN var_or_indirect COMMA _ number COMMA STRING RPAREN

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77

  number        go to state 245
  integer       go to state 75

state 215

   4) statements : statements _ statement terminator
   5) block : NEWLINE statements _

  COMMENT       shift, and go to state 57
  JUMP          shift, and go to state 40
  IO_METHOD     shift, and go to state 37
  MOVE          shift, and go to state 52
  NEWLINE       shift, and go to state 25
  WORD          shift, and go to state 35
  IF            shift, and go to state 41
  UNLESS        shift, and go to state 42
  FOR           shift, and go to state 43
  WHILE         shift, and go to state 44
  WAIT_FOR      shift, and go to state 30
  WAIT_UNTIL    shift, and go to state 31
  FANUC_USE     shift, and go to state 33
  SET_SKIP_CONDITION  shift, and go to state 34
  NAMESPACE     shift, and go to state 45
  CASE          shift, and go to state 46
  INDIRECT      shift, and go to state 56
  EVAL          shift, and go to state 29
  TIMER_METHOD  shift, and go to state 28
  RAISE         shift, and go to state 27
  ABORT         shift, and go to state 24
  POSITION_DATA  shift, and go to state 58
  RUN           shift, and go to state 36
  TP_HEADER     shift, and go to state 26
  PAUSE         shift, and go to state 23
  LABEL         shift, and go to state 32
  $default      reduce using rule 5 (block)

  statement     go to state 60
  comment       go to state 4
  definition    go to state 5
  namespace     go to state 6
  motion_statement  go to state 7
  label_definition  go to state 8
  conditional   go to state 9
  inline_conditional  go to state 10
  forloop       go to state 11
  while_loop    go to state 12
  use_statement  go to state 13
  set_skip_statement  go to state 14
  wait_statement  go to state 15
  case_statement  go to state 16
  fanuc_eval    go to state 17
  timer_method  go to state 18
  position_data  go to state 19
  raise         go to state 20
  tp_header_definition  go to state 21
  empty_stmt    go to state 22
  var           go to state 38
  indirect_thing  go to state 39
  inlineable    go to state 47
  jump          go to state 48
  assignment    go to state 49
  io_method     go to state 50
  program_call  go to state 51
  label         go to state 53
  var_or_indirect  go to state 54
  namespaces    go to state 55

state 216

  62) conditional : IF expression block else_block _ END

  END           shift, and go to state 246


state 217

  86) else_block : ELSE _ block

  NEWLINE       shift, and go to state 178

  block         go to state 247

state 218

  63) conditional : UNLESS expression block else_block _ END

  END           shift, and go to state 248


state 219

  64) forloop : FOR var IN LPAREN _ minmax_val TO minmax_val RPAREN block END

  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  minmax_val    go to state 249
  integer       go to state 250
  var           go to state 251
  namespaces    go to state 55

state 220

  65) while_loop : WHILE expression block END _

  $default      reduce using rule 65 (while_loop)


state 221

  68) namespace : NAMESPACE WORD block END _

  $default      reduce using rule 68 (namespace)


state 222

  69) case_statement : CASE var swallow_newlines case_conditions _ case_else END
  71) case_conditions : case_conditions _ case_condition

  ELSE          shift, and go to state 254
  WHEN          shift, and go to state 224
  $default      reduce using rule 76 (case_else)

  case_else     go to state 252
  case_condition  go to state 253

state 223

  70) case_conditions : case_condition _

  $default      reduce using rule 70 (case_conditions)


state 224

  72) case_condition : WHEN _ case_allowed_condition swallow_newlines case_allowed_statement terminator

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  case_allowed_condition  go to state 255
  number        go to state 256
  var           go to state 257
  namespaces    go to state 55
  integer       go to state 75

state 225

  88) motion_statement : MOVE DOT swallow_newlines TO _ LPAREN var RPAREN motion_modifiers

  LPAREN        shift, and go to state 258


state 226

 112) assignment : var_or_indirect PLUS EQUAL expression _
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  $default      reduce using rule 112 (assignment)

  operator      go to state 125

state 227

 113) assignment : var_or_indirect MINUS EQUAL expression _
 125) expression : expression _ operator expression

  EEQUAL        shift, and go to state 126
  NOTEQUAL      shift, and go to state 127
  GTE           shift, and go to state 130
  LTE           shift, and go to state 131
  LT            shift, and go to state 128
  GT            shift, and go to state 129
  PLUS          shift, and go to state 132
  MINUS         shift, and go to state 133
  STAR          shift, and go to state 135
  SLASH         shift, and go to state 136
  DIV           shift, and go to state 137
  AND           shift, and go to state 139
  OR            shift, and go to state 134
  MOD           shift, and go to state 138
  $default      reduce using rule 113 (assignment)

  operator      go to state 125

state 228

 146) indirect_thing : INDIRECT LPAREN STRING COMMA _ indirectable RPAREN

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  number        go to state 73
  var           go to state 74
  namespaces    go to state 55
  indirectable  go to state 259
  integer       go to state 75

state 229

 182) position_data : POSITION_DATA sn hash sn _ END

  END           shift, and go to state 260


state 230

 184) hash : LBRACE sn _ hash_attributes sn RBRACE
 185) hash : LBRACE sn _ RBRACE

  STRING        shift, and go to state 264
  RBRACE        shift, and go to state 262

  hash_attributes  go to state 261
  hash_attribute  go to state 263

state 231

  36) wait_statement : WAIT_FOR LPAREN indirectable COMMA STRING _ RPAREN

  RPAREN        shift, and go to state 265


state 232

  38) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT _ wait_modifier
  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT _ wait_modifier DOT wait_modifier

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  wait_modifier  go to state 266
  timeout_modifier  go to state 267
  after_modifier  go to state 268
  swallow_newlines  go to state 269

state 233

  50) args : args COMMA arg _

  $default      reduce using rule 50 (args)


state 234

 165) sreg : SREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 270


state 235

 166) ualm : UALM LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 271


state 236

 167) timer : TIMER LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 272


state 237

 168) argument : ARG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 273


state 238

 169) vreg : VREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 274


state 239

 170) position : POSITION LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 275


state 240

 171) numreg : NUMREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 276


state 241

 172) posreg : POSREG LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 277


state 242

 173) output : OUTPUT LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 278


state 243

 174) input : INPUT LBRACK DIGIT _ RBRACK

  RBRACK        shift, and go to state 279


state 244

  48) program_call : RUN WORD LPAREN args RPAREN _

  $default      reduce using rule 48 (program_call)


state 245

  58) io_method : IO_METHOD LPAREN var_or_indirect COMMA number _ COMMA STRING RPAREN

  COMMA         shift, and go to state 280


state 246

  62) conditional : IF expression block else_block END _

  $default      reduce using rule 62 (conditional)


state 247

  86) else_block : ELSE block _

  $default      reduce using rule 86 (else_block)


state 248

  63) conditional : UNLESS expression block else_block END _

  $default      reduce using rule 63 (conditional)


state 249

  64) forloop : FOR var IN LPAREN minmax_val _ TO minmax_val RPAREN block END

  TO            shift, and go to state 281


state 250

  66) minmax_val : integer _

  $default      reduce using rule 66 (minmax_val)


state 251

  67) minmax_val : var _

  $default      reduce using rule 67 (minmax_val)


state 252

  69) case_statement : CASE var swallow_newlines case_conditions case_else _ END

  END           shift, and go to state 282


state 253

  71) case_conditions : case_conditions case_condition _

  $default      reduce using rule 71 (case_conditions)


state 254

  75) case_else : ELSE _ swallow_newlines case_allowed_statement terminator

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 283

state 255

  72) case_condition : WHEN case_allowed_condition _ swallow_newlines case_allowed_statement terminator

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 284

state 256

  73) case_allowed_condition : number _

  $default      reduce using rule 73 (case_allowed_condition)


state 257

  74) case_allowed_condition : var _

  $default      reduce using rule 74 (case_allowed_condition)


state 258

  88) motion_statement : MOVE DOT swallow_newlines TO LPAREN _ var RPAREN motion_modifiers

  WORD          shift, and go to state 67

  var           go to state 285
  namespaces    go to state 55

state 259

 146) indirect_thing : INDIRECT LPAREN STRING COMMA indirectable _ RPAREN

  RPAREN        shift, and go to state 286


state 260

 182) position_data : POSITION_DATA sn hash sn END _

  $default      reduce using rule 182 (position_data)


state 261

 184) hash : LBRACE sn hash_attributes _ sn RBRACE
 187) hash_attributes : hash_attributes _ COMMA sn hash_attribute

  NEWLINE       shift, and go to state 113
  COMMA         shift, and go to state 288
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 115
  sn            go to state 287

state 262

 185) hash : LBRACE sn RBRACE _

  $default      reduce using rule 185 (hash)


state 263

 186) hash_attributes : hash_attribute _

  $default      reduce using rule 186 (hash_attributes)


state 264

 188) hash_attribute : STRING _ COLON hash_value

  COLON         shift, and go to state 289


state 265

  36) wait_statement : WAIT_FOR LPAREN indirectable COMMA STRING RPAREN _

  $default      reduce using rule 36 (wait_statement)


state 266

  38) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier _
  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier _ DOT wait_modifier

  DOT           shift, and go to state 290
  $default      reduce using rule 38 (wait_statement)


state 267

  40) wait_modifier : timeout_modifier _

  $default      reduce using rule 40 (wait_modifier)


state 268

  41) wait_modifier : after_modifier _

  $default      reduce using rule 41 (wait_modifier)


state 269

  42) timeout_modifier : swallow_newlines _ TIMEOUT LPAREN label RPAREN
  43) after_modifier : swallow_newlines _ AFTER LPAREN indirectable COMMA STRING RPAREN

  TIMEOUT       shift, and go to state 291
  AFTER         shift, and go to state 292


state 270

 165) sreg : SREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 165 (sreg)


state 271

 166) ualm : UALM LBRACK DIGIT RBRACK _

  $default      reduce using rule 166 (ualm)


state 272

 167) timer : TIMER LBRACK DIGIT RBRACK _

  $default      reduce using rule 167 (timer)


state 273

 168) argument : ARG LBRACK DIGIT RBRACK _

  $default      reduce using rule 168 (argument)


state 274

 169) vreg : VREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 169 (vreg)


state 275

 170) position : POSITION LBRACK DIGIT RBRACK _

  $default      reduce using rule 170 (position)


state 276

 171) numreg : NUMREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 171 (numreg)


state 277

 172) posreg : POSREG LBRACK DIGIT RBRACK _

  $default      reduce using rule 172 (posreg)


state 278

 173) output : OUTPUT LBRACK DIGIT RBRACK _

  $default      reduce using rule 173 (output)


state 279

 174) input : INPUT LBRACK DIGIT RBRACK _

  $default      reduce using rule 174 (input)


state 280

  58) io_method : IO_METHOD LPAREN var_or_indirect COMMA number COMMA _ STRING RPAREN

  STRING        shift, and go to state 293


state 281

  64) forloop : FOR var IN LPAREN minmax_val TO _ minmax_val RPAREN block END

  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  minmax_val    go to state 294
  integer       go to state 250
  var           go to state 251
  namespaces    go to state 55

state 282

  69) case_statement : CASE var swallow_newlines case_conditions case_else END _

  $default      reduce using rule 69 (case_statement)


state 283

  75) case_else : ELSE swallow_newlines _ case_allowed_statement terminator

  JUMP          shift, and go to state 40
  WORD          shift, and go to state 295
  RUN           shift, and go to state 36

  case_allowed_statement  go to state 296
  program_call  go to state 297
  jump          go to state 298

state 284

  72) case_condition : WHEN case_allowed_condition swallow_newlines _ case_allowed_statement terminator

  JUMP          shift, and go to state 40
  WORD          shift, and go to state 295
  RUN           shift, and go to state 36

  case_allowed_statement  go to state 299
  program_call  go to state 297
  jump          go to state 298

state 285

  88) motion_statement : MOVE DOT swallow_newlines TO LPAREN var _ RPAREN motion_modifiers

  RPAREN        shift, and go to state 300


state 286

 146) indirect_thing : INDIRECT LPAREN STRING COMMA indirectable RPAREN _

  $default      reduce using rule 146 (indirect_thing)


state 287

 184) hash : LBRACE sn hash_attributes sn _ RBRACE

  RBRACE        shift, and go to state 301


state 288

 187) hash_attributes : hash_attributes COMMA _ sn hash_attribute

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 115
  sn            go to state 302

state 289

 188) hash_attribute : STRING COLON _ hash_value

  STRING        shift, and go to state 304
  MINUS         shift, and go to state 88
  TRUE_FALSE    shift, and go to state 308
  LBRACK        shift, and go to state 310
  LBRACE        shift, and go to state 193
  $default      reduce using rule 196 (optional_sign)

  hash_value    go to state 303
  hash          go to state 305
  array         go to state 306
  optional_sign  go to state 307
  sign          go to state 309

state 290

  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier DOT _ wait_modifier

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  wait_modifier  go to state 311
  timeout_modifier  go to state 267
  after_modifier  go to state 268
  swallow_newlines  go to state 269

state 291

  42) timeout_modifier : swallow_newlines TIMEOUT _ LPAREN label RPAREN

  LPAREN        shift, and go to state 312


state 292

  43) after_modifier : swallow_newlines AFTER _ LPAREN indirectable COMMA STRING RPAREN

  LPAREN        shift, and go to state 313


state 293

  58) io_method : IO_METHOD LPAREN var_or_indirect COMMA number COMMA STRING _ RPAREN

  RPAREN        shift, and go to state 314


state 294

  64) forloop : FOR var IN LPAREN minmax_val TO minmax_val _ RPAREN block END

  RPAREN        shift, and go to state 315


state 295

  47) program_call : WORD _ LPAREN args RPAREN

  LPAREN        shift, and go to state 89


state 296

  75) case_else : ELSE swallow_newlines case_allowed_statement _ terminator

  COMMENT       shift, and go to state 57
  NEWLINE       shift, and go to state 62
  false         shift, and go to state 64
  $default      reduce using rule 179 (terminator)

  terminator    go to state 316
  comment       go to state 63

state 297

  77) case_allowed_statement : program_call _

  $default      reduce using rule 77 (case_allowed_statement)


state 298

  78) case_allowed_statement : jump _

  $default      reduce using rule 78 (case_allowed_statement)


state 299

  72) case_condition : WHEN case_allowed_condition swallow_newlines case_allowed_statement _ terminator

  COMMENT       shift, and go to state 57
  NEWLINE       shift, and go to state 62
  false         shift, and go to state 64
  $default      reduce using rule 179 (terminator)

  terminator    go to state 317
  comment       go to state 63

state 300

  88) motion_statement : MOVE DOT swallow_newlines TO LPAREN var RPAREN _ motion_modifiers

  DOT           shift, and go to state 320

  motion_modifiers  go to state 318
  motion_modifier  go to state 319

state 301

 184) hash : LBRACE sn hash_attributes sn RBRACE _

  $default      reduce using rule 184 (hash)


state 302

 187) hash_attributes : hash_attributes COMMA sn _ hash_attribute

  STRING        shift, and go to state 264

  hash_attribute  go to state 321

state 303

 188) hash_attribute : STRING COLON hash_value _

  $default      reduce using rule 188 (hash_attribute)


state 304

 189) hash_value : STRING _

  $default      reduce using rule 189 (hash_value)


state 305

 190) hash_value : hash _

  $default      reduce using rule 190 (hash_value)


state 306

 191) hash_value : array _

  $default      reduce using rule 191 (hash_value)


state 307

 192) hash_value : optional_sign _ DIGIT
 193) hash_value : optional_sign _ REAL

  REAL          shift, and go to state 323
  DIGIT         shift, and go to state 322


state 308

 194) hash_value : TRUE_FALSE _

  $default      reduce using rule 194 (hash_value)


state 309

 195) optional_sign : sign _

  $default      reduce using rule 195 (optional_sign)


state 310

 197) array : LBRACK _ sn array_values sn RBRACK

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 115
  sn            go to state 324

state 311

  39) wait_statement : WAIT_UNTIL LPAREN expression RPAREN DOT wait_modifier DOT wait_modifier _

  $default      reduce using rule 39 (wait_statement)


state 312

  42) timeout_modifier : swallow_newlines TIMEOUT LPAREN _ label RPAREN

  LABEL         shift, and go to state 32

  label         go to state 325

state 313

  43) after_modifier : swallow_newlines AFTER LPAREN _ indirectable COMMA STRING RPAREN

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  indirectable  go to state 326
  number        go to state 73
  var           go to state 74
  namespaces    go to state 55
  integer       go to state 75

state 314

  58) io_method : IO_METHOD LPAREN var_or_indirect COMMA number COMMA STRING RPAREN _

  $default      reduce using rule 58 (io_method)


state 315

  64) forloop : FOR var IN LPAREN minmax_val TO minmax_val RPAREN _ block END

  NEWLINE       shift, and go to state 178

  block         go to state 327

state 316

  75) case_else : ELSE swallow_newlines case_allowed_statement terminator _

  $default      reduce using rule 75 (case_else)


state 317

  72) case_condition : WHEN case_allowed_condition swallow_newlines case_allowed_statement terminator _

  $default      reduce using rule 72 (case_condition)


state 318

  88) motion_statement : MOVE DOT swallow_newlines TO LPAREN var RPAREN motion_modifiers _
  90) motion_modifiers : motion_modifiers _ motion_modifier

  DOT           shift, and go to state 320
  $default      reduce using rule 88 (motion_statement)

  motion_modifier  go to state 328

state 319

  89) motion_modifiers : motion_modifier _

  $default      reduce using rule 89 (motion_modifiers)


state 320

  91) motion_modifier : DOT _ swallow_newlines AT LPAREN speed RPAREN
  92) motion_modifier : DOT _ swallow_newlines TERM LPAREN valid_terminations RPAREN
  93) motion_modifier : DOT _ swallow_newlines OFFSET LPAREN var RPAREN
  94) motion_modifier : DOT _ swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN
  95) motion_modifier : DOT _ swallow_newlines SKIP LPAREN label optional_lpos_arg RPAREN

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 329

state 321

 187) hash_attributes : hash_attributes COMMA sn hash_attribute _

  $default      reduce using rule 187 (hash_attributes)


state 322

 192) hash_value : optional_sign DIGIT _

  $default      reduce using rule 192 (hash_value)


state 323

 193) hash_value : optional_sign REAL _

  $default      reduce using rule 193 (hash_value)


state 324

 197) array : LBRACK sn _ array_values sn RBRACK

  STRING        shift, and go to state 304
  MINUS         shift, and go to state 88
  TRUE_FALSE    shift, and go to state 308
  LBRACK        shift, and go to state 310
  LBRACE        shift, and go to state 193
  $default      reduce using rule 196 (optional_sign)

  hash          go to state 305
  array         go to state 306
  optional_sign  go to state 307
  sign          go to state 309
  array_values  go to state 330
  array_value   go to state 331
  hash_value    go to state 332

state 325

  42) timeout_modifier : swallow_newlines TIMEOUT LPAREN label _ RPAREN

  RPAREN        shift, and go to state 333


state 326

  43) after_modifier : swallow_newlines AFTER LPAREN indirectable _ COMMA STRING RPAREN

  COMMA         shift, and go to state 334


state 327

  64) forloop : FOR var IN LPAREN minmax_val TO minmax_val RPAREN block _ END

  END           shift, and go to state 335


state 328

  90) motion_modifiers : motion_modifiers motion_modifier _

  $default      reduce using rule 90 (motion_modifiers)


state 329

  91) motion_modifier : DOT swallow_newlines _ AT LPAREN speed RPAREN
  92) motion_modifier : DOT swallow_newlines _ TERM LPAREN valid_terminations RPAREN
  93) motion_modifier : DOT swallow_newlines _ OFFSET LPAREN var RPAREN
  94) motion_modifier : DOT swallow_newlines _ TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN
  95) motion_modifier : DOT swallow_newlines _ SKIP LPAREN label optional_lpos_arg RPAREN

  TIME_SEGMENT  shift, and go to state 339
  AT            shift, and go to state 336
  TERM          shift, and go to state 337
  OFFSET        shift, and go to state 338
  SKIP          shift, and go to state 340


state 330

 197) array : LBRACK sn array_values _ sn RBRACK
 199) array_values : array_values _ COMMA sn array_value

  NEWLINE       shift, and go to state 113
  COMMA         shift, and go to state 342
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 115
  sn            go to state 341

state 331

 198) array_values : array_value _

  $default      reduce using rule 198 (array_values)


state 332

 200) array_value : hash_value _

  $default      reduce using rule 200 (array_value)


state 333

  42) timeout_modifier : swallow_newlines TIMEOUT LPAREN label RPAREN _

  $default      reduce using rule 42 (timeout_modifier)


state 334

  43) after_modifier : swallow_newlines AFTER LPAREN indirectable COMMA _ STRING RPAREN

  STRING        shift, and go to state 343


state 335

  64) forloop : FOR var IN LPAREN minmax_val TO minmax_val RPAREN block END _

  $default      reduce using rule 64 (forloop)


state 336

  91) motion_modifier : DOT swallow_newlines AT _ LPAREN speed RPAREN

  LPAREN        shift, and go to state 344


state 337

  92) motion_modifier : DOT swallow_newlines TERM _ LPAREN valid_terminations RPAREN

  LPAREN        shift, and go to state 345


state 338

  93) motion_modifier : DOT swallow_newlines OFFSET _ LPAREN var RPAREN

  LPAREN        shift, and go to state 346


state 339

  94) motion_modifier : DOT swallow_newlines TIME_SEGMENT _ LPAREN time COMMA time_seg_actions RPAREN

  LPAREN        shift, and go to state 347


state 340

  95) motion_modifier : DOT swallow_newlines SKIP _ LPAREN label optional_lpos_arg RPAREN

  LPAREN        shift, and go to state 348


state 341

 197) array : LBRACK sn array_values sn _ RBRACK

  RBRACK        shift, and go to state 349


state 342

 199) array_values : array_values COMMA _ sn array_value

  NEWLINE       shift, and go to state 113
  $default      reduce using rule 181 (swallow_newlines)

  swallow_newlines  go to state 115
  sn            go to state 350

state 343

  43) after_modifier : swallow_newlines AFTER LPAREN indirectable COMMA STRING _ RPAREN

  RPAREN        shift, and go to state 351


state 344

  91) motion_modifier : DOT swallow_newlines AT LPAREN _ speed RPAREN

  STRING        shift, and go to state 354
  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  speed         go to state 352
  number        go to state 73
  var           go to state 74
  indirectable  go to state 353
  namespaces    go to state 55
  integer       go to state 75

state 345

  92) motion_modifier : DOT swallow_newlines TERM LPAREN _ valid_terminations RPAREN

  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67
  MINUS         shift, and go to state 358

  valid_terminations  go to state 355
  integer       go to state 356
  var           go to state 357
  namespaces    go to state 55

state 346

  93) motion_modifier : DOT swallow_newlines OFFSET LPAREN _ var RPAREN

  WORD          shift, and go to state 67

  var           go to state 359
  namespaces    go to state 55

state 347

  94) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN _ time COMMA time_seg_actions RPAREN

  REAL          shift, and go to state 76
  DIGIT         shift, and go to state 77
  WORD          shift, and go to state 67

  time          go to state 360
  var           go to state 361
  number        go to state 362
  namespaces    go to state 55
  integer       go to state 75

state 348

  95) motion_modifier : DOT swallow_newlines SKIP LPAREN _ label optional_lpos_arg RPAREN

  LABEL         shift, and go to state 32

  label         go to state 363

state 349

 197) array : LBRACK sn array_values sn RBRACK _

  $default      reduce using rule 197 (array)


state 350

 199) array_values : array_values COMMA sn _ array_value

  STRING        shift, and go to state 304
  MINUS         shift, and go to state 88
  TRUE_FALSE    shift, and go to state 308
  LBRACK        shift, and go to state 310
  LBRACE        shift, and go to state 193
  $default      reduce using rule 196 (optional_sign)

  hash          go to state 305
  array         go to state 306
  optional_sign  go to state 307
  sign          go to state 309
  array_value   go to state 364
  hash_value    go to state 332

state 351

  43) after_modifier : swallow_newlines AFTER LPAREN indirectable COMMA STRING RPAREN _

  $default      reduce using rule 43 (after_modifier)


state 352

  91) motion_modifier : DOT swallow_newlines AT LPAREN speed _ RPAREN

  RPAREN        shift, and go to state 365


state 353

 107) speed : indirectable _ COMMA STRING

  COMMA         shift, and go to state 366


state 354

 108) speed : STRING _

  $default      reduce using rule 108 (speed)


state 355

  92) motion_modifier : DOT swallow_newlines TERM LPAREN valid_terminations _ RPAREN

  RPAREN        shift, and go to state 367


state 356

  96) valid_terminations : integer _

  $default      reduce using rule 96 (valid_terminations)


state 357

  97) valid_terminations : var _

  $default      reduce using rule 97 (valid_terminations)


state 358

  98) valid_terminations : MINUS _ DIGIT

  DIGIT         shift, and go to state 368


state 359

  93) motion_modifier : DOT swallow_newlines OFFSET LPAREN var _ RPAREN

  RPAREN        shift, and go to state 369


state 360

  94) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time _ COMMA time_seg_actions RPAREN

  COMMA         shift, and go to state 370


state 361

 105) time : var _

  $default      reduce using rule 105 (time)


state 362

 106) time : number _

  $default      reduce using rule 106 (time)


state 363

  95) motion_modifier : DOT swallow_newlines SKIP LPAREN label _ optional_lpos_arg RPAREN

  COMMA         shift, and go to state 372
  $default      reduce using rule 100 (optional_lpos_arg)

  optional_lpos_arg  go to state 371

state 364

 199) array_values : array_values COMMA sn array_value _

  $default      reduce using rule 199 (array_values)


state 365

  91) motion_modifier : DOT swallow_newlines AT LPAREN speed RPAREN _

  $default      reduce using rule 91 (motion_modifier)


state 366

 107) speed : indirectable COMMA _ STRING

  STRING        shift, and go to state 373


state 367

  92) motion_modifier : DOT swallow_newlines TERM LPAREN valid_terminations RPAREN _

  $default      reduce using rule 92 (motion_modifier)


state 368

  98) valid_terminations : MINUS DIGIT _

  $default      reduce using rule 98 (valid_terminations)


state 369

  93) motion_modifier : DOT swallow_newlines OFFSET LPAREN var RPAREN _

  $default      reduce using rule 93 (motion_modifier)


state 370

  94) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA _ time_seg_actions RPAREN

  IO_METHOD     shift, and go to state 37
  WORD          shift, and go to state 295
  RUN           shift, and go to state 36

  time_seg_actions  go to state 374
  program_call  go to state 375
  io_method     go to state 376

state 371

  95) motion_modifier : DOT swallow_newlines SKIP LPAREN label optional_lpos_arg _ RPAREN

  RPAREN        shift, and go to state 377


state 372

  99) optional_lpos_arg : COMMA _ var

  WORD          shift, and go to state 67

  var           go to state 378
  namespaces    go to state 55

state 373

 107) speed : indirectable COMMA STRING _

  $default      reduce using rule 107 (speed)


state 374

  94) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions _ RPAREN

  RPAREN        shift, and go to state 379


state 375

 103) time_seg_actions : program_call _

  $default      reduce using rule 103 (time_seg_actions)


state 376

 104) time_seg_actions : io_method _

  $default      reduce using rule 104 (time_seg_actions)


state 377

  95) motion_modifier : DOT swallow_newlines SKIP LPAREN label optional_lpos_arg RPAREN _

  $default      reduce using rule 95 (motion_modifier)


state 378

  99) optional_lpos_arg : COMMA var _

  $default      reduce using rule 99 (optional_lpos_arg)


state 379

  94) motion_modifier : DOT swallow_newlines TIME_SEGMENT LPAREN time COMMA time_seg_actions RPAREN _

  $default      reduce using rule 94 (motion_modifier)

