#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.5
# from lexical definition file "generators/scanner.rex".
#++

require 'racc/parser'
class TPPlus::Scanner < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader   :lineno
  attr_reader   :filename
  attr_accessor :state

  def scan_setup(str)
    @ss = StringScanner.new(str)
    @lineno =  1
    @state  = nil
  end

  def action
    yield
  end

  def scan_str(str)
    scan_setup(str)
    do_parse
  end
  alias :scan :scan_str

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_setup(f.read)
    end
  end

  def scan_file( filename )
    load_file(filename)
    do_parse
  end


  def next_token
    return if @ss.eos?
    
    # skips empty actions
    until token = _next_token or @ss.eos?; end
    token
  end

  def _next_token
    text = @ss.peek(1)
    @lineno  +=  1  if text == "\n"
    token = case @state
    when nil
      case
      when (text = @ss.scan(/\#.*(?=\n?$)/i))
         action { [:COMMENT, text] }

      when (text = @ss.scan(/\b(true|false)\b/i))
         action { [:TRUE_FALSE, text.downcase == "true"] }

      when (text = @ss.scan(/R(?=\[)/i))
         action { [:NUMREG, text] }

      when (text = @ss.scan(/P(?=\[)/i))
         action { [:POSITION, text] }

      when (text = @ss.scan(/PR(?=\[)/i))
         action { [:POSREG, text] }

      when (text = @ss.scan(/VR(?=\[)/i))
         action { [:VREG, text] }

      when (text = @ss.scan(/SR(?=\[)/i))
         action { [:SREG, text] }

      when (text = @ss.scan(/AR(?=\[)/i))
         action { [:ARG, text] }

      when (text = @ss.scan(/TIMER(?=\[)/i))
         action { [:TIMER, text] }

      when (text = @ss.scan(/UALM(?=\[)/i))
         action { [:UALM, text] }

      when (text = @ss.scan(/F(?=\[)/i))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/DO(?=\[)/i))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/RO(?=\[)/i))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/UO(?=\[)/i))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/SO(?=\[)/i))
         action { [:OUTPUT, text] }

      when (text = @ss.scan(/DI(?=\[)/i))
         action { [:INPUT, text] }

      when (text = @ss.scan(/RI(?=\[)/i))
         action { [:INPUT, text] }

      when (text = @ss.scan(/UI(?=\[)/i))
         action { [:INPUT, text] }

      when (text = @ss.scan(/SI(?=\[)/i))
         action { [:INPUT, text] }

      when (text = @ss.scan(/\=\=/i))
         action { [:EEQUAL, text] }

      when (text = @ss.scan(/\=/i))
         action { [:EQUAL, text] }

      when (text = @ss.scan(/\:\=/i))
         action { [:ASSIGN, text] }

      when (text = @ss.scan(/\<\>|\!\=/i))
         action { [:NOTEQUAL, text] }

      when (text = @ss.scan(/\>\=/i))
         action { [:GTE, text] }

      when (text = @ss.scan(/\<\=/i))
         action { [:LTE, text] }

      when (text = @ss.scan(/\</i))
         action { [:LT, text] }

      when (text = @ss.scan(/\>/i))
         action { [:GT, text] }

      when (text = @ss.scan(/\+/i))
         action { [:PLUS, text] }

      when (text = @ss.scan(/\-/i))
         action { [:MINUS, text] }

      when (text = @ss.scan(/\*/i))
         action { [:STAR, text] }

      when (text = @ss.scan(/\//i))
         action { [:SLASH, text] }

      when (text = @ss.scan(/DIV/i))
         action { [:DIV, text] }

      when (text = @ss.scan(/&&/i))
         action { [:AND, text] }

      when (text = @ss.scan(/\|\|/i))
         action { [:OR, text] }

      when (text = @ss.scan(/\%/i))
         action { [:MOD, text] }

      when (text = @ss.scan(/\@/i))
         action { @state = :LABEL; [:AT_SYM, text] }

      when (text = @ss.scan(/\bTP_IGNORE_PAUSE\b/i))
         action { [:TP_HEADER, text] }

      when (text = @ss.scan(/\bTP_COMMENT\b/i))
         action { [:TP_HEADER, text] }

      when (text = @ss.scan(/\bTP_GROUPMASK\b/i))
         action { [:TP_HEADER, text] }

      when (text = @ss.scan(/\bTP_SUBTYPE\b/i))
         action { [:TP_HEADER, text] }

      when (text = @ss.scan(/\bset_uframe\b/i))
         action { [:FANUC_SET, text] }

      when (text = @ss.scan(/\bset_skip_condition\b/i))
         action { [:FANUC_SET, text] }

      when (text = @ss.scan(/\buse_payload\b/i))
         action { [:FANUC_USE, text] }

      when (text = @ss.scan(/\buse_uframe\b/i))
         action { [:FANUC_USE, text] }

      when (text = @ss.scan(/\buse_utool\b/i))
         action { [:FANUC_USE, text] }

      when (text = @ss.scan(/\babort\b/i))
         action { [:ABORT, text] }

      when (text = @ss.scan(/\bafter\b/i))
         action { [:AFTER, text] }

      when (text = @ss.scan(/\bat\b/i))
         action { [:AT, text] }

      when (text = @ss.scan(/\bcase\b/i))
         action { [:CASE, text] }

      when (text = @ss.scan(/\bcircular_move\b/i))
         action { [:MOVE, text] }

      when (text = @ss.scan(/\belse\b/i))
         action { [:ELSE, text] }

      when (text = @ss.scan(/\bend\b/i))
         action { [:END, text] }

      when (text = @ss.scan(/\beval\b/i))
         action { [:EVAL, text] }

      when (text = @ss.scan(/\bfor\b/i))
         action { [:FOR, text] }

      when (text = @ss.scan(/\bgroup\b/i))
         action { [:GROUP, text] }

      when (text = @ss.scan(/\bif\b/i))
         action { [:IF, text] }

      when (text = @ss.scan(/\bindirect\b/i))
         action { [:INDIRECT, text] }

      when (text = @ss.scan(/\bin\b/i))
         action { [:IN, text] }

      when (text = @ss.scan(/\bjoint_move\b/i))
         action { [:MOVE, text] }

      when (text = @ss.scan(/\bjump_to\b/i))
         action { [:JUMP, text] }

      when (text = @ss.scan(/\blinear_move\b/i))
         action { [:MOVE, text] }

      when (text = @ss.scan(/\bnamespace\b/i))
         action { [:NAMESPACE, text] }

      when (text = @ss.scan(/\boffset\b/i))
         action { [:OFFSET, text] }

      when (text = @ss.scan(/\bpause\b/i))
         action { [:PAUSE, text] }

      when (text = @ss.scan(/\bposition_data\b/i))
         action { [:POSITION_DATA, text] }

      when (text = @ss.scan(/\bpulse\b/i))
         action { [:IO_METHOD, text] }

      when (text = @ss.scan(/\braise\b/i))
         action { [:RAISE, text] }

      when (text = @ss.scan(/\breset\b/i))
         action { [:TIMER_METHOD, :reset] }

      when (text = @ss.scan(/\brestart\b/i))
         action { [:TIMER_METHOD, :restart] }

      when (text = @ss.scan(/\brun\b/i))
         action { [:RUN, text] }

      when (text = @ss.scan(/\bskip_to\b/i))
         action { [:SKIP, text] }

      when (text = @ss.scan(/\bstart\b/i))
         action { [:TIMER_METHOD, :start] }

      when (text = @ss.scan(/\bstop\b/i))
         action { [:TIMER_METHOD, :stop] }

      when (text = @ss.scan(/\bterm\b/i))
         action { [:TERM, text] }

      when (text = @ss.scan(/\btime_after\b/i))
         action { [:TIME_SEGMENT, text] }

      when (text = @ss.scan(/\btime_before\b/i))
         action { [:TIME_SEGMENT, text] }

      when (text = @ss.scan(/\btimeout_to\b/i))
         action { [:TIMEOUT, text] }

      when (text = @ss.scan(/\btoggle\b/i))
         action { [:IO_METHOD, text] }

      when (text = @ss.scan(/\btool_offset\b/i))
         action { [:OFFSET, text] }

      when (text = @ss.scan(/\bturn_on|turn_off\b/i))
         action { [:IO_METHOD, text] }

      when (text = @ss.scan(/\bto\b/i))
         action { [:TO, text] }

      when (text = @ss.scan(/\bunless\b/i))
         action { [:UNLESS, text] }

      when (text = @ss.scan(/\bvision_offset\b/i))
         action { [:OFFSET, text] }

      when (text = @ss.scan(/\bwait_for\b/i))
         action { [:WAIT_FOR, text] }

      when (text = @ss.scan(/\bwait_until\b/i))
         action { [:WAIT_UNTIL, text] }

      when (text = @ss.scan(/\bwhen\b/i))
         action { [:WHEN, text] }

      when (text = @ss.scan(/\bwhile\b/i))
         action { [:WHILE, text] }

      when (text = @ss.scan(/\r?\n/i))
         action { [:NEWLINE, text] }

      when (text = @ss.scan(/;/i))
         action { [:SEMICOLON, text] }

      when (text = @ss.scan(/\d+\.\d+|\.\d+/i))
         action { [:REAL, text.to_f] }

      when (text = @ss.scan(/\./i))
         action { [:DOT, text] }

      when (text = @ss.scan(/\d+/i))
         action { [:DIGIT, text.to_i] }

      when (text = @ss.scan(/\!/i))
         action { [:BANG, text] }

      when (text = @ss.scan(/\s+/i))
        ;

      when (text = @ss.scan(/[\w\?\!_]+/i))
         action { [:WORD, text] }

      when (text = @ss.scan(/"([^\n\r\f"]|\n|\r\n|\r|\f|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])*"|'([^\n\r\f']|\n|\r\n|\r|\f|[^\0-\177]|\\[0-9A-Fa-f]{1,6}(\r\n|[\s])?|\\[^\n\r\f0-9A-Fa-f])*'/i))
         action { [:STRING, text[1,text.length-2]] }

      when (text = @ss.scan(/./i))
         action { [text, text] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    when :LABEL
      case
      when (text = @ss.scan(/[\w_0-9]+\b/i))
         action { @state = nil; [:WORD, text] }

      else
        text = @ss.string[@ss.pos .. -1]
        raise  ScanError, "can not match: '" + text + "'"
      end  # if

    else
      raise  ScanError, "undefined state: '" + state.to_s + "'"
    end  # case state
    token
  end  # def _next_token

end # class

if __FILE__ == $0
  exit  if ARGV.size != 1
  filename = ARGV.shift
  rex = TPPlus::Scanner.new
  begin
    rex.load_file  filename
    while  token = rex.next_token
      p token
    end
  rescue
    $stderr.printf  "%s:%d:%s\n", rex.filename, rex.lineno, $!.message
  end
end
